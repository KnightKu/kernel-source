From: Jiri Kosina <jkosina@suse.cz>
Subject: KAISER: fix ldt freeing
Patch-mainline: No, backport-specific

3.2.96 version of 0018-KAISER-Kernel-Address-Isolation.patch changed
the hunk that frees ldt while moving it over to __free_ldt_struct(), so
that ldt->entries freeing mechanism is changed from free_page() to kfree()
whic leads to

 BUG: Bad page state in process ldt_gdt_32  pfn:803852
 page:ffffea001c0c51f0 count:0 mapcount:0 mapping:          (null) index:0x0
 page flags: 0x20000000000100(slab)
 Pid: 7815, comm: ldt_gdt_32 Tainted: G    B      E X 3.0.101-0-default #1
 Call Trace:
  [<ffffffff81004b35>] dump_trace+0x75/0x300
  [<ffffffff814690d3>] dump_stack+0x69/0x6f
  [<ffffffff811026d1>] bad_page+0xb1/0x120
  [<ffffffff81102c36>] free_pages_prepare+0xe6/0x110
  [<ffffffff81106679>] free_hot_cold_page+0x49/0x1f0
  [<ffffffff8100513b>] __free_ldt_struct+0x1b/0x40
  [<ffffffff810053f2>] write_ldt+0x172/0x270
  [<ffffffff81475956>] sysenter_dispatch+0x7/0x32

Bring back the original behavior.

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
---
 arch/x86/kernel/ldt.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/arch/x86/kernel/ldt.c
+++ b/arch/x86/kernel/ldt.c
@@ -40,7 +40,7 @@ static void __free_ldt_struct(struct ldt
 	if (ldt->size * LDT_ENTRY_SIZE > PAGE_SIZE)
 		vfree(ldt->entries);
 	else
-		free_page((unsigned long)ldt->entries);
+		kfree(ldt->entries);
 	kfree(ldt);
 }
 
