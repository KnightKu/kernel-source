From: Elena Reshetova <elena.reshetova@intel.com>
Date: Mon, 4 Sep 2017 13:11:43 +0300
Subject: locking/barriers: introduce new memory barrier gmb()
Patch-mainline: submitted on 2018/1/9
References: bnc#1068032

In constrast to existing mb() and rmb() barriers,
gmb() barrier is arch-independent and can be used to
implement any type of memory barrier.
In x86 case, it is either lfence or mfence, based on
processor type. ARM and others can define it according
to their needs.

Suggested-by: Arjan van de Ven <arjan@linux.intel.com>
Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/include/asm/system.h |    3 +++
 include/asm-generic/system.h  |    4 ++++
 2 files changed, 7 insertions(+)

--- a/arch/x86/include/asm/system.h
+++ b/arch/x86/include/asm/system.h
@@ -416,6 +416,9 @@
 #define wmb()	asm volatile("sfence" ::: "memory")
 #endif
 
+/* there is no alternative_2 in 3.0, so reuse rdtsc_barrier */
+#define gmb()	rdtsc_barrier()
+
 /**
  * read_barrier_depends - Flush all pending reads that subsequents reads
  * depend on.
--- /dev/null
+++ b/include/linux/system.h
@@ -0,0 +1,10 @@
+#ifndef _LINUX_SYSTEM_H
+#define _LINUX_SYSTEM_H
+
+#include <asm/system.h>
+
+#ifndef gmb
+#define gmb()   do { } while (0)
+#endif
+
+#endif
