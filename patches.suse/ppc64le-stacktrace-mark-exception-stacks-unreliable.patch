From: Nicolai Stange <nstange@suse.de>
Subject: ppc64le: reliable stacktrace: mark stacktraces with exception frames as unreliable
Patch-mainline: Never, temporary fix to get things going here
References: bsc#1089669

The current reliable stacktrace implementation for ppc64le is based on the
assumption that it's run only on current or on tasks scheduled out while in
process context. It's an inherent limitation of the ppc64 ELF v2 ABI that
it's impossible to decide upon the validity of the last frame's LR slot.
This means that the latest two functions from the callchain might get
missed: the one a task is currently executing in and its caller.

For scheduled out tasks that would mean that _switch() and __switch_to()
can be missing from reliable stacktraces (actually __switch_to() is not
because _switch properly saves its LR).

For current, that would be save_stack_trace_tsk_reliable() itself
and its caller. (Again, the caller is actually not left out because
save_stack_trace_tsk_reliable() does some non-inlined function calls,
e.g. to ftrace_graph_ret_addr() and this forces the compiler to make
it save the LR.)

Not having _switch() or save_stack_trace_tsk_reliable() reported in a
task's reliable stacktrace is Ok from a live patching POV, because these
either can't be patched anyway or, in the latter case, the missing
consistency guarantee could probably be worked around.

However, a task could be sleeping in an exception, a fault for example.
If that happens, the faulting function itself as well as potentially its
parent would not be included in the reported stacktrace. This can cause the
livepatching core to transition a task prematurely and thus, to violate its
consistency guarantees.

Fix this by checking each stack frame for being an exception frame and mark
stacktraces containing those as unreliable.

Note that this is a temporary fix for
suse-commit a4da14cfd7a8 ("On ppc64le we HAVE_RELIABLE_STACKTRACE")
which is likely to get reworked anyway.

Signed-off-by: Nicolai Stange <nstange@suse.de>
---
 arch/powerpc/kernel/stacktrace.c |    6 ++++++
 1 file changed, 6 insertions(+)

--- a/arch/powerpc/kernel/stacktrace.c
+++ b/arch/powerpc/kernel/stacktrace.c
@@ -141,6 +141,12 @@ save_stack_trace_tsk_reliable(struct tas
 		if (sp & 0xF)
 			return 1;
 
+		/* Mark stacktraces with exception frames as unreliable. */
+		if (sp <= stack_end - STACK_INT_FRAME_SIZE &&
+		    stack[STACK_FRAME_MARKER] == STACK_FRAME_REGS_MARKER) {
+			return 1;
+		}
+
 		newsp = stack[0];
 		/* Stack grows downwards; unwinder may only go up. */
 		if (newsp <= sp)
