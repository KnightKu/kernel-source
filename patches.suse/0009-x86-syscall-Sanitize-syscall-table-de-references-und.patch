From: Dan Williams <dan.j.williams@intel.com>
Date: Mon, 29 Jan 2018 17:02:59 -0800
Subject: x86/syscall: Sanitize syscall table de-references under speculation
Git-commit: 2fbd7af5af8665d18bcefae3e9700be07e22b681
Patch-mainline: v4.16-rc1
References: bsc#1068032 CVE-2017-5753

The syscall table base is a user controlled function pointer in kernel
space. Use array_index_nospec() to prevent any out of bounds speculation.

While retpoline prevents speculating into a userspace directed target it
does not stop the pointer de-reference, the concern is leaking memory
relative to the syscall table base, by observing instruction cache
behavior.

[js] 64bit syscall entry is still in asm in 4.4

Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Cc: linux-arch@vger.kernel.org
Cc: kernel-hardening@lists.openwall.com
Cc: gregkh@linuxfoundation.org
Cc: Andy Lutomirski <luto@kernel.org>
Cc: alan@linux.intel.com
Link: https://lkml.kernel.org/r/151727417984.33451.1216731042505722161.stgit@dwillia2-desk3.amr.corp.intel.com
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/ia32/ia32entry.S  |   14 ++++++++++++++
 arch/x86/kernel/entry_64.S |    4 ++++
 2 files changed, 18 insertions(+)

--- a/arch/x86/ia32/ia32entry.S
+++ b/arch/x86/ia32/ia32entry.S
@@ -157,6 +157,8 @@ ENTRY(ia32_sysenter_target)
 	jnz  sysenter_tracesys
 	cmpq	$(IA32_NR_syscalls-1),%rax
 	ja	ia32_badsys
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 sysenter_do_call:
 	IA32_ARG_FIXUP
 sysenter_dispatch:
@@ -197,6 +199,8 @@ sysexit_from_sys_call:
 	movl RAX-ARGOFFSET(%rsp),%eax	/* reload syscall number */
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja ia32_badsys
+	sbb %r8, %r8			/* array_index_mask_nospec() */
+	and %r8, %rax
 	movl %ebx,%edi			/* reload 1st syscall arg */
 	movl RCX-ARGOFFSET(%rsp),%esi	/* reload 2nd syscall arg */
 	movl RDX-ARGOFFSET(%rsp),%edx	/* reload 3rd syscall arg */
@@ -250,6 +254,8 @@ sysenter_tracesys:
 	RESTORE_REST
 	cmpq	$(IA32_NR_syscalls-1),%rax
 	ja	int_ret_from_sys_call /* sysenter_tracesys has set RAX(%rsp) */
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 	jmp	sysenter_do_call
 	CFI_ENDPROC
 ENDPROC(ia32_sysenter_target)
@@ -316,6 +322,8 @@ ENTRY(ia32_cstar_target)
 	jnz   cstar_tracesys
 	cmpq $IA32_NR_syscalls-1,%rax
 	ja  ia32_badsys
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 cstar_do_call:
 	IA32_ARG_FIXUP 1
 cstar_dispatch:
@@ -369,6 +377,8 @@ cstar_tracesys:
 	xchgl %ebp,%r9d
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja int_ret_from_sys_call /* cstar_tracesys has set RAX(%rsp) */
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 	jmp cstar_do_call
 END(ia32_cstar_target)
 				
@@ -426,6 +436,8 @@ ENTRY(ia32_syscall)
 	jnz ia32_tracesys
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja ia32_badsys
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 ia32_do_call:
 	IA32_ARG_FIXUP
 	call *ia32_sys_call_table(,%rax,8) # xxx: rip relative
@@ -445,6 +457,8 @@ ia32_tracesys:
 	RESTORE_REST
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja  int_ret_from_sys_call	/* ia32_tracesys has set RAX(%rsp) */
+	sbb %r10, %r10			/* array_index_mask_nospec() */
+	and %r10, %rax
 	jmp ia32_do_call
 END(ia32_syscall)
 
--- a/arch/x86/kernel/entry_64.S
+++ b/arch/x86/kernel/entry_64.S
@@ -483,6 +483,8 @@ ENTRY(system_call_after_swapgs)
 system_call_fastpath:
 	cmpq $__NR_syscall_max,%rax
 	ja badsys
+	sbb %rcx, %rcx			/* array_index_mask_nospec() */
+	and %rcx, %rax
 	movq %r10,%rcx
 	call *sys_call_table(,%rax,8)  # XXX:	 rip relative
 	movq %rax,RAX-ARGOFFSET(%rsp)
@@ -599,6 +601,8 @@ tracesys:
 	RESTORE_REST
 	cmpq $__NR_syscall_max,%rax
 	ja   int_ret_from_sys_call	/* RAX(%rsp) set to -ENOSYS above */
+	sbb %rcx, %rcx			/* array_index_mask_nospec() */
+	and %rcx, %rax
 	movq %r10,%rcx	/* fixup for C */
 	call *sys_call_table(,%rax,8)
 	movq %rax,RAX-ARGOFFSET(%rsp)
