From: Nicolai Stange <nstange@suse.de>
Subject: kGraft: fix small race in reversion code
References: bsc#1083125
Patch-mainline: never, SLE12-specific

There's a small race in kGraft's reversion code which can cause individual
functions to get spuriously redirected to their unpatched original before
the whole patchset is ready for transition, i.e. before kgr_immutable gets
cleared.

It's observable only under heavy load. Note that direct reverts are not
officially supported.

The problem is that kgr_patch_code() would install the slow handler with
kgr_immutable set, but ->state still being equal to
KGR_PATCH_APPLIED != KGR_PATCH_REVERT_SLOW.

This causes kgr_stub_slow() to evaluate go_new to false and redirect
to the unpatched original.

The fix, as suggested by Petr Mladek, is to make kgr_patch_code() treat the
revert case specially and let it set ->state to KGR_PATCH_REVERT_SLOW
_before_ actually installing the slow handler.

---
 kernel/kgraft.c |   16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -735,9 +735,11 @@ static int kgr_patch_code(struct kgr_pat
 		bool revert, bool replace_revert)
 {
 	struct ftrace_ops *new_ops = NULL, *unreg_ops = NULL;
-	enum kgr_patch_state next_state;
+	enum kgr_patch_state prev_state, next_state;
 	int err;
 
+	prev_state = patch_fun->state;
+
 	switch (patch_fun->state) {
 	case KGR_PATCH_INIT:
 		if (revert || final || replace_revert)
@@ -811,15 +813,23 @@ static int kgr_patch_code(struct kgr_pat
 		return -EINVAL;
 	}
 
+
+	/* Slow stub has to see KGR_PATCH_REVERT_SLOW state all the time. */
+	if (next_state == KGR_PATCH_REVERT_SLOW)
+		patch_fun->state = next_state;
+
 	/*
 	 * In case of error the caller can still have a chance to restore the
 	 * previous consistent state.
 	 */
 	err = kgr_switch_fops(patch_fun, new_ops, unreg_ops);
-	if (err)
+	if (err) {
+		patch_fun->state = prev_state;
 		return err;
+	}
 
-	patch_fun->state = next_state;
+	if (next_state != KGR_PATCH_REVERT_SLOW)
+		patch_fun->state = next_state;
 
 	pr_debug("redirection for %s:%s,%lu done\n",
 		kgr_get_objname(patch_fun), patch_fun->name, patch_fun->sympos);
