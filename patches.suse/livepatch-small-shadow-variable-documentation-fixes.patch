From: Petr Mladek <pmladek@suse.com>
Date: Mon, 25 Sep 2017 17:41:59 +0200
Subject: livepatch: Small shadow variable documentation fixes
Git-commit: 19205da6a0da701787d42ad754edd1ffb514c956
Patch-mainline: v4.15-rc1
References: bsc#1071995 fate#323487

The description of the basic operations was a bit inconsistent
and based on older version of the patchset.

Also the size of the spinlock structure should be allocated
instead of the pointer.

Signed-off-by: Petr Mladek <pmladek@suse.com>
Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
Signed-off-by: Jiri Kosina <jkosina@suse.cz>
Acked-by: Miroslav Benes <mbenes@suse.cz>
---
 Documentation/livepatch/shadow-vars.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Documentation/livepatch/shadow-vars.txt b/Documentation/livepatch/shadow-vars.txt
index e3ffc4301bfa..89c66634d600 100644
--- a/Documentation/livepatch/shadow-vars.txt
+++ b/Documentation/livepatch/shadow-vars.txt
@@ -6,7 +6,7 @@ Shadow variables are a simple way for livepatch modules to associate
 additional "shadow" data with existing data structures.  Shadow data is
 allocated separately from parent data structures, which are left
 unmodified.  The shadow variable API described in this document is used
-to allocate/attach and detach/release shadow variables to their parents.
+to allocate/add and remove/free shadow variables to/from their parents.
 
 The implementation introduces a global, in-kernel hashtable that
 associates pointers to parent objects and a numeric identifier of the
@@ -107,7 +107,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 	sta = kzalloc(sizeof(*sta) + hw->sta_data_size, gfp);
 
 	/* Attach a corresponding shadow variable, then initialize it */
-	ps_lock = klp_shadow_alloc(sta, PS_LOCK, NULL, sizeof(ps_lock), gfp);
+	ps_lock = klp_shadow_alloc(sta, PS_LOCK, NULL, sizeof(*ps_lock), gfp);
 	if (!ps_lock)
 		goto shadow_fail;
 	spin_lock_init(ps_lock);

