From: Petr Mladek <pmladek@suse.cz>
Date: Wed, 30 Jul 2014 11:34:13 +0200
Subject: kgr: handle patched modules that are being removed
Patch-mainline: not yet, kgraft
References: fate#313296

kGraft allows to patch kernel modules. Such functions typically have disabled
the flag "abort_on_error". It allows to load the patch even before the affected
module.

This commit solves the situation when a patched module is being removed.
The patch might stay but the obsolete ftrace filters must be removed and
the status must be updated.

Everything has to be ready to patch the module when it is eventually loaded
back again.

The error handling is not ideal and will be improved in the future.

Also the support for handling the patch in progress will be added later. It will
need more tweaking.

Finally, the support for more patches against the same function will be added
later.

js: make kgr_module_exit_nb static (reported by Fengguang Wu
    <fengguang.wu@intel.com>)
js: fix !MODULES builds
pm: do not mess error codes when patching modules (remove "err |=")
mb: return error in kgr_init if notifier registration fails
pm: unregister only the used ftrace ops when removing a patched module
pm: handle module removal for non-finished patches

Signed-off-by: Petr Mladek <pmladek@suse.cz>
Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kernel/kgraft.c |  162 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 162 insertions(+)

--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -34,6 +34,7 @@
 static int kgr_patch_code(struct kgr_patch_fun *patch_fun, bool final,
 		bool revert);
 static void kgr_work_fn(struct work_struct *work);
+static void __kgr_handle_going_module(const struct module *mod);
 
 static struct workqueue_struct *kgr_wq;
 static DECLARE_DELAYED_WORK(kgr_work, kgr_work_fn);
@@ -377,6 +378,22 @@ out:
 	return found_pf;
 }
 
+/*
+ * Check if the given struct patch_fun is the given type.
+ * Note that it does not make sense for KGR_PREVIOUS.
+ */
+static bool kgr_is_patch_fun(const struct kgr_patch_fun *patch_fun,
+		 enum kgr_find_type type)
+{
+	struct kgr_patch_fun *found_pf;
+
+	if (type == KGR_IN_PROGRESS)
+		return patch_fun->patch == kgr_patch;
+
+	found_pf = kgr_get_patch_fun(patch_fun, type);
+	return patch_fun == found_pf;
+}
+
 static unsigned long kgr_get_old_fun(const struct kgr_patch_fun *patch_fun)
 {
 	struct kgr_patch_fun *pf = kgr_get_patch_fun(patch_fun, KGR_PREVIOUS);
@@ -684,6 +701,142 @@ void kgr_patch_remove(struct kgr_patch *
 }
 EXPORT_SYMBOL_GPL(kgr_patch_remove);
 
+#ifdef CONFIG_MODULES
+
+/*
+ * Disable the patch immediately. It does not matter in which state it is.
+ *
+ * This function is used when a module is being removed and the code is
+ * no longer called.
+ */
+static int kgr_forced_code_patch_removal(struct kgr_patch_fun *patch_fun)
+{
+	struct ftrace_ops *ops = NULL;
+	int err;
+
+	switch (patch_fun->state) {
+	case KGR_PATCH_INIT:
+	case KGR_PATCH_SKIPPED:
+		return 0;
+	case KGR_PATCH_SLOW:
+	case KGR_PATCH_REVERT_SLOW:
+		if (kgr_is_patch_fun(patch_fun, KGR_LAST_EXISTING))
+			ops = &patch_fun->ftrace_ops_slow;
+		break;
+	case KGR_PATCH_APPLIED:
+		if (kgr_is_patch_fun(patch_fun, KGR_LAST_EXISTING))
+			ops = &patch_fun->ftrace_ops_fast;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (ops) {
+		err = kgr_ftrace_disable(patch_fun, ops);
+		if (err) {
+			pr_err("kgr: forced disabling of ftrace function for %s failed (%d)\n",
+				patch_fun->name, err);
+			/*
+			 * Cannot remove stubs for leaving module. This is very
+			 * suspicious situation, so we better BUG here.
+			 */
+			BUG();
+		}
+	}
+
+	patch_fun->state = KGR_PATCH_SKIPPED;
+	pr_debug("kgr: forced disabling for %s done\n", patch_fun->name);
+	return 0;
+}
+
+/*
+ * Check the given patch and disable pieces related to the module
+ * that is being removed.
+ */
+static void kgr_handle_patch_for_going_module(struct kgr_patch *patch,
+					     const struct module *mod)
+{
+	struct kgr_patch_fun *patch_fun;
+	unsigned long addr;
+
+	kgr_for_each_patch_fun(patch, patch_fun) {
+		addr = kallsyms_lookup_name(patch_fun->name);
+		if (!within_module(addr, mod))
+			continue;
+		/*
+		 * FIXME: It should schedule the patch removal or block
+		 *	  the module removal or taint kernel or so.
+		 */
+		if (patch_fun->abort_if_missing) {
+			pr_err("kgr: removing function %s that is required for the patch %s\n",
+			       patch_fun->name, patch->name);
+		}
+
+		kgr_forced_code_patch_removal(patch_fun);
+	}
+}
+
+/*
+ * Disable patches for the module that is being removed.
+ *
+ * The module removal cannot be stopped at this stage. All affected patches have
+ * to be removed. Ftrace does not unregister stubs itself in order to optimize
+ * when the affected module gets loaded again. We have to do it ourselves. If we
+ * fail here and the module is loaded once more, we are going to patch it. This
+ * could lead to the conflicts with ftrace and more errors. We would not be able
+ * to load the module cleanly.
+ *
+ * In case of any error we BUG in the process.
+ */
+static void __kgr_handle_going_module(const struct module *mod)
+{
+	struct kgr_patch *p;
+
+	list_for_each_entry(p, &kgr_patches, list)
+		kgr_handle_patch_for_going_module(p, mod);
+
+	/* also check the patch in progress for removed functions */
+	if (kgr_patch)
+		kgr_handle_patch_for_going_module(kgr_patch, mod);
+}
+
+static void kgr_handle_going_module(const struct module *mod)
+{
+	/* Nope when kGraft has not been initialized yet */
+	if (!kgr_initialized)
+		return;
+
+	mutex_lock(&kgr_in_progress_lock);
+	__kgr_handle_going_module(mod);
+	mutex_unlock(&kgr_in_progress_lock);
+}
+
+static int kgr_module_notify_exit(struct notifier_block *self,
+				  unsigned long val, void *data)
+{
+	const struct module *mod = data;
+
+	if (val == MODULE_STATE_GOING)
+		kgr_handle_going_module(mod);
+
+	return 0;
+}
+
+#else
+
+static int kgr_module_notify_exit(struct notifier_block *self,
+		unsigned long val, void *data)
+{
+	return 0;
+}
+
+#endif /* CONFIG_MODULES */
+
+static struct notifier_block kgr_module_exit_nb = {
+	.notifier_call = kgr_module_notify_exit,
+	.priority = 0,
+};
+
 static int __init kgr_init(void)
 {
 	int ret;
@@ -704,10 +857,19 @@ static int __init kgr_init(void)
 		goto err_remove_files;
 	}
 
+	ret = register_module_notifier(&kgr_module_exit_nb);
+	if (ret) {
+		pr_err("kgr: failed to register kGraft module exit notifier (%d)\n",
+			ret);
+		goto err_destroy_wq;
+	}
+
 	kgr_initialized = true;
 	pr_info("kgr: successfully initialized\n");
 
 	return 0;
+err_destroy_wq:
+	destroy_workqueue(kgr_wq);
 err_remove_files:
 	kgr_remove_files();
 
