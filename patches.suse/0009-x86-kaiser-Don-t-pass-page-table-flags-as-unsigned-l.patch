From 735d430cb9c5dc42ddfeea9d33938bca9fdb7d68 Mon Sep 17 00:00:00 2001
From: Joerg Roedel <jroedel@suse.de>
Date: Tue, 13 Mar 2018 15:39:27 +0100
Subject: [PATCH 09/17] x86/kaiser: Don't pass page-table flags as unsigned
 long
References: bsc#1068032 CVE-2017-5754
Patch-mainline: No, different upstream implementation

On 32 bit 'unsigned long' is also only 32 bit large, which
is not enough for PAE. Use the correct type to make the code
PAE-safe.

Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 arch/x86/include/asm/kaiser.h | 2 +-
 arch/x86/mm/kaiser.c          | 4 ++--
 include/linux/kaiser.h        | 7 ++++++-
 3 files changed, 9 insertions(+), 4 deletions(-)

--- a/arch/x86/include/asm/kaiser.h
+++ b/arch/x86/include/asm/kaiser.h
@@ -150,7 +150,7 @@ static inline void __init kaiser_check_b
  *  synchronization has to be done.  the pages have to be
  *  manually unmapped again when they are not needed any longer.
  */
-extern int kaiser_add_mapping(unsigned long addr, unsigned long size, unsigned long flags);
+extern int kaiser_add_mapping(unsigned long addr, unsigned long size, pteval_t flags);
 
 /**
  *  kaiser_remove_mapping - unmap a virtual memory part of the shadow mapping
--- a/arch/x86/mm/kaiser.c
+++ b/arch/x86/mm/kaiser.c
@@ -219,7 +219,7 @@ static int kaiser_add_user_map(const voi
 	return ret;
 }
 
-static int kaiser_add_user_map_ptrs(const void *start, const void *end, unsigned long flags)
+static int kaiser_add_user_map_ptrs(const void *start, const void *end, pteval_t flags)
 {
 	unsigned long size = end - start;
 
@@ -355,7 +355,7 @@ void __init kaiser_init(void)
 }
 
 /* Add a mapping to the shadow mapping, and synchronize the mappings */
-int kaiser_add_mapping(unsigned long addr, unsigned long size, unsigned long flags)
+int kaiser_add_mapping(unsigned long addr, unsigned long size, pteval_t flags)
 {
 	if (!kaiser_enabled)
 		return 0;
--- a/include/linux/kaiser.h
+++ b/include/linux/kaiser.h
@@ -32,7 +32,12 @@ static inline void kaiser_init(void)
 {
 }
 static inline int kaiser_add_mapping(unsigned long addr,
-				     unsigned long size, unsigned long flags)
+				     unsigned long size,
+#ifdef CONFIG_X86
+				     pteval_t flags)
+#else
+				     unsigned long flags)
+#endif
 {
 	return 0;
 }
