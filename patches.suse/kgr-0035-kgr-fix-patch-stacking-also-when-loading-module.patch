From: Petr Mladek <pmladek@suse.cz>
Date: Wed, 20 Aug 2014 15:43:42 +0200
Subject: kgr: fix patch stacking also when loading module
Patch-mainline: submitted for review
References: fate#313296

If a module symbol is patched multiple times, only the last ftrace_ops
must be registered. Otherwise, the first registered stub is used and
the later patches are ignored.

This solution is suboptimal because even obsolete patches are registered and
immediately unregistered. On the other hand, the operation is not time critical
and the current solution allows to reuse the existing code.

Signed-off-by: Petr Mladek <pmladek@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kernel/kgraft.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/kernel/kgraft.c b/kernel/kgraft.c
index 992f8ebb7ced..a49280d550db 100644
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -581,6 +581,7 @@ EXPORT_SYMBOL_GPL(kgr_patch_remove);
 static void kgr_handle_patch_for_loaded_module(struct kgr_patch *patch,
 					       const struct module *mod)
 {
+	struct ftrace_ops *unreg_ops;
 	struct kgr_patch_fun *patch_fun;
 	unsigned long addr;
 	int err;
@@ -597,6 +598,8 @@ static void kgr_handle_patch_for_loaded_module(struct kgr_patch *patch,
 		if (err)
 			continue;
 
+		unreg_ops = kgr_get_old_fops(patch_fun);
+
 		err = kgr_ftrace_enable(patch_fun, &patch_fun->ftrace_ops_fast);
 		if (err) {
 			pr_err("kgr: cannot enable ftrace function for the originally skipped %lx (%s)\n",
@@ -604,6 +607,14 @@ static void kgr_handle_patch_for_loaded_module(struct kgr_patch *patch,
 			continue;
 		}
 
+		if (unreg_ops) {
+			err = kgr_ftrace_disable(patch_fun, unreg_ops);
+			if (err) {
+				pr_warning("kgr: disabling ftrace function for %s failed with %d\n",
+					   patch_fun->name, err);
+			}
+		}
+
 		if (patch == kgr_patch)
 			patch_fun->state = KGR_PATCH_APPLIED_NON_FINALIZED;
 		else
-- 
2.1.0

