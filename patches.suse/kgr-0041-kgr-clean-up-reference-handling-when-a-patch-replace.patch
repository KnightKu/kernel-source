From: Petr Mladek <pmladek@suse.cz>
Date: Fri, 31 Oct 2014 19:08:27 +0100
Subject: kgr: clean up reference handling when a patch replaces all others
Patch-mainline: submitted for review
References: fate#313296

I was always a bit confused by "p->refs--" in kgr_replace_all().
It decreases reference for each patch in kgr_patches list. In fact,
it does the same thing as kgr_refs_dec() and is just an optimization.

The reference numbers define dependency between patches. They help to make
sure that the patches are reverted in the right order.

This patch causes that if a patch is going to replace all older patches,
it will not increment the references in the first place.

Note that this patch should not cause any change in the behavior. All changes
to the older patches are blocked until the last patch is finalized. It is guarded
by the kgr_in_progress variable.

Signed-off-by: Petr Mladek <pmladek@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kernel/kgraft.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/kernel/kgraft.c b/kernel/kgraft.c
index 043f22e442b2..45a927626e59 100644
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -169,6 +169,10 @@ static bool kgr_patch_contains(const struct kgr_patch *p, const char *name)
 	return false;
 }
 
+/*
+ * All patches from kgr_patches are obsoleted and will get replaced
+ * by kgr_patch.
+ */
 static void kgr_replace_all(void)
 {
 	struct kgr_patch_fun *pf;
@@ -190,9 +194,6 @@ static void kgr_replace_all(void)
 			pf->state = KGR_PATCH_REVERTED;
 		}
 
-		/* decrease the reference this patch increased earlier */
-		p->refs--;
-
 		if (needs_revert)
 			list_move(&p->list, &kgr_to_revert);
 		else
@@ -592,7 +593,8 @@ int kgr_modify_kernel(struct kgr_patch *patch, bool revert, bool force)
 	kgr_revert = revert;
 	if (revert)
 		list_del(&kgr_patch->list);
-	else
+	else if (!patch->replace_all)
+		/* block all older patches if they are not replaced */
 		kgr_refs_inc();
 	mutex_unlock(&kgr_in_progress_lock);
 
-- 
2.1.3

