From: Miroslav Benes <mbenes@suse.cz>
Date: Tue, 4 Nov 2014 15:27:33 +0100
Subject: kgr: support for forcing success of patching process
Patch-mainline: not yet, kgraft
References: fate#313296

Patching process can be blocked by kernel thread which has not be
amended with klp_kgraft_mark_task_safe() call. Thus we need to have a
possibility to mark such thread as migrated on request.

The patch makes the global attribute kgr_in_progress in kgraft sysfs
directory writable. 'echo 0 > /sys/kernel/kgraft/in_progress' clears
the TIF_KGR_IN_PROGRESS flag for all processes. With that patching
process should finish successfully.

Clearing of the flag is done using klp_kgraft_mark_task_safe(). After
that it is necessary to keep the patches list and stuff in the correct
state and set internal kgr_in_progress flag to false. This is however
done by kgr_finalize() called by running workqueue.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Jiri Kosina <jkosina@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h |    1 +
 kernel/kgraft.c        |   10 ++++++++++
 kernel/kgraft_files.c  |   14 +++++++++++++-
 3 files changed, 24 insertions(+), 1 deletion(-)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -109,6 +109,7 @@ extern bool kgr_force_load_module;
 extern int kgr_patch_kernel(struct kgr_patch *);
 extern void kgr_patch_remove(struct kgr_patch *);
 
+extern void kgr_unmark_processes(void);
 extern int kgr_modify_kernel(struct kgr_patch *patch, bool revert);
 extern int kgr_module_init(const struct module *mod);
 extern int kgr_patch_dir_add(struct kgr_patch *patch);
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -294,6 +294,16 @@ static void kgr_work_fn(struct work_stru
 	printed = false;
 }
 
+void kgr_unmark_processes(void)
+{
+	struct task_struct *p, *t;
+
+	read_lock(&tasklist_lock);
+	for_each_process_thread(p, t)
+		klp_kgraft_mark_task_safe(t);
+	read_unlock(&tasklist_lock);
+}
+
 static void kgr_handle_processes(void)
 {
 	struct task_struct *p, *t;
--- a/kernel/kgraft_files.c
+++ b/kernel/kgraft_files.c
@@ -153,6 +153,18 @@ static ssize_t in_progress_show(struct k
 	return snprintf(buf, PAGE_SIZE, "%d\n", kgr_in_progress);
 }
 
+static ssize_t in_progress_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	if (count == 0 || buf[0] != '0')
+		return -EINVAL;
+
+	kgr_unmark_processes();
+	WARN(1, "kgr: all processes marked as migrated on admin's request\n");
+
+	return count;
+}
+
 static ssize_t force_load_module_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
@@ -177,7 +189,7 @@ static ssize_t force_load_module_store(s
 	return count;
 }
 
-static struct kobj_attribute kgr_attr_in_progress = __ATTR_RO(in_progress);
+static struct kobj_attribute kgr_attr_in_progress = __ATTR_RW(in_progress);
 static struct kobj_attribute kgr_attr_force_load_module =
 		__ATTR_RW(force_load_module);
 
