From: Miroslav Benes <mbenes@suse.cz>
Date: Mon, 30 Mar 2015 15:47:38 +0200
Subject: kgr: allow for forced module load
Patch-mainline: not yet, kgraft
References: fate#313296

The delayed patching of the modules can fail. When the insertion of the
module fails we refuse to load it. However the user can force the
insertion in spite of the errors by setting force_load_module in sysfs
infrastructure. When true (default is false) the errors are omitted and
the module is loaded.

If an error occurs for going module we cannot do anything else than to
BUG.  It is very suspicious situation (kGraft or ftrace) and consistent
state cannot be guaranteed any longer. We cannot prohibit the module to
go away.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Reviewed-by: Petr Mladek <pmladek@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/kgraft.h |    1 +
 kernel/kgraft.c        |   19 ++++++++++++++++---
 kernel/kgraft_files.c  |   27 +++++++++++++++++++++++++++
 3 files changed, 44 insertions(+), 3 deletions(-)

--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -102,6 +102,7 @@ struct kgr_patch {
 #define KGR_PATCH_END				{ }
 
 extern bool kgr_in_progress;
+extern bool kgr_force_load_module;
 
 extern int kgr_patch_kernel(struct kgr_patch *);
 extern void kgr_patch_remove(struct kgr_patch *);
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -42,6 +42,7 @@ static DEFINE_MUTEX(kgr_in_progress_lock
 static LIST_HEAD(kgr_patches);
 static bool __percpu *kgr_irq_use_new;
 bool kgr_in_progress;
+bool kgr_force_load_module;
 static bool kgr_initialized;
 static struct kgr_patch *kgr_patch;
 static bool kgr_revert;
@@ -759,7 +760,9 @@ static int kgr_patch_code_delayed(struct
  * Therefore it could set the fast path for already finalized patches.
  *
  * The patching of the module (registration of the stubs) could fail. This would
- * prevent the loading.
+ * prevent the loading. However the user can force the loading. In such
+ * situation we continue. This can lead the inconsistent system state but the
+ * user should know what he is doing.
  */
 static int kgr_handle_patch_for_loaded_module(struct kgr_patch *patch,
 					       const struct module *mod)
@@ -778,12 +781,22 @@ static int kgr_handle_patch_for_loaded_m
 
 		err = kgr_init_ftrace_ops(patch_fun);
 		if (err) {
-			return err;
+			if (kgr_force_load_module) {
+				WARN(1, "kgr: delayed patching of the module (%s) failed (%d). Insertion of the module forced.\n",
+					mod->name, err);
+				continue;
+			} else {
+				return err;
+			}
 		}
 
 		err = kgr_patch_code_delayed(patch_fun);
 		if (err) {
-			return err;
+			if (kgr_force_load_module)
+				WARN(1, "kgr: delayed patching of the module (%s) failed (%d). Insertion of the module forced.\n",
+					mod->name, err);
+			else
+				return err;
 		}
 	}
 
--- a/kernel/kgraft_files.c
+++ b/kernel/kgraft_files.c
@@ -143,10 +143,37 @@ static ssize_t in_progress_show(struct k
 	return snprintf(buf, PAGE_SIZE, "%d\n", kgr_in_progress);
 }
 
+static ssize_t force_load_module_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", kgr_force_load_module);
+}
+
+static ssize_t force_load_module_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned long val;
+	int ret;
+
+	ret = kstrtoul(buf, 10, &val);
+	if (ret)
+		return -EINVAL;
+
+	if (val != 1 && val != 0)
+		return -EINVAL;
+
+	kgr_force_load_module = val;
+
+	return count;
+}
+
 static struct kobj_attribute kgr_attr_in_progress = __ATTR_RO(in_progress);
+static struct kobj_attribute kgr_attr_force_load_module =
+		__ATTR_RW(force_load_module);
 
 static struct attribute *kgr_sysfs_entries[] = {
 	&kgr_attr_in_progress.attr,
+	&kgr_attr_force_load_module.attr,
 	NULL
 };
 
