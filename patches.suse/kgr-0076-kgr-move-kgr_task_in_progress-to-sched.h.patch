From: Miroslav Benes <mbenes@suse.cz>
Date: Wed, 3 Jun 2015 13:44:16 +0200
Subject: kgr: move kgr_task_in_progress() to sched.h
Patch-mainline: submitted for review
References: fate#313296

Move kgr_task_in_progress() function to sched.h header file. We'll use
it also in other subsystems than kGraft and there is no reason to
include kgraft.h all over the place.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 fs/proc/base.c         |    2 +-
 include/linux/kgraft.h |    5 -----
 include/linux/sched.h  |    9 +++++++++
 3 files changed, 10 insertions(+), 6 deletions(-)

--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -87,7 +87,7 @@
 #include <linux/slab.h>
 #include <linux/flex_array.h>
 #include <linux/posix-timers.h>
-#include <linux/kgraft.h>
+#include <linux/sched.h>
 #ifdef CONFIG_HARDWALL
 #include <asm/hardwall.h>
 #endif
--- a/include/linux/kgraft.h
+++ b/include/linux/kgraft.h
@@ -126,11 +126,6 @@ static inline void kgr_mark_task_in_prog
 	set_tsk_thread_flag(p, TIF_KGR_IN_PROGRESS);
 }
 
-static inline bool kgr_task_in_progress(struct task_struct *p)
-{
-	return test_tsk_thread_flag(p, TIF_KGR_IN_PROGRESS);
-}
-
 #endif /* IS_ENABLED(CONFIG_KGRAFT) */
 
 #endif /* LINUX_KGR_H */
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -2825,8 +2825,17 @@ static inline void kgr_task_safe(struct
 {
 	clear_tsk_thread_flag(p, TIF_KGR_IN_PROGRESS);
 }
+
+static inline bool kgr_task_in_progress(struct task_struct *p)
+{
+	return test_tsk_thread_flag(p, TIF_KGR_IN_PROGRESS);
+}
 #else
 static inline void kgr_task_safe(struct task_struct *p) { }
+static inline bool kgr_task_in_progress(struct task_struct *p)
+{
+	return false;
+}
 #endif /* IS_ENABLED(CONFIG_KGRAFT) */
 
 static inline unsigned long task_rlimit(const struct task_struct *tsk,
