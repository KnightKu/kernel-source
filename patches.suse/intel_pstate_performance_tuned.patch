From dcade8c8a173f25d33252ecf12ef86ffc7fe9b63 Mon Sep 17 00:00:00 2001
From: Thomas Renninger <trenn@suse.com>
Date: Wed, 2 Mar 2016 10:08:23 +0000
Subject: [PATCH] intel_pstate: Adjust performance knobs on servers for SLES

Patch-mainline: Never, upstream is trying to integrate scheduler/pm instead
References: bnc#945201

Changes in power idling in 3.13 and 3.14 caused major regressions in number
of basic workloads that idle for short periods of time for either IO or
because they are client/server workloads. Upstream resists any attempt to
fix this on the basis that power consumption is higher if the CPU does not
idle very quickly. Their focus has been on having the cpufreq driver and
scheduler co-operate closely but it's months away from making any sort of
progress and in the meantime, server performance is severely impacted. This
patch boosts performance of dbench, pgbench and sysbench-oltp workloads
to be equivalent to SLE 12 SP1 performance.

Depending on ACPI FADT table's preferred PM profile (compare with ACPI
spec chapter 5.2.9.1 Preferred PM Profile System Types) the intel_pstate
performance tunables will be set to a more performance oriented policy.

intel_pstate=vanilla_policy
boot parameter will disable this functionality again.

intel_pstate=server_policy
will apply the performance optimized values also on laptops, desktops
or where the ACPI preferred PM profile value is not set.
---
 drivers/cpufreq/intel_pstate.c | 46 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 98fb8821382d..7c8d8048f641 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -800,6 +800,15 @@ static struct cpu_defaults knl_params = {
 	},
 };
 
+static struct pstate_adjust_policy adj_server_policy = {
+	.sample_rate_ms = 10,
+	.deadband = 0,
+	.setpoint = 30,
+	.p_gain_pct = 10,
+	.d_gain_pct = 0,
+	.i_gain_pct = 0,
+};
+
 static void intel_pstate_get_min_max(struct cpudata *cpu, int *min, int *max)
 {
 	int max_perf = cpu->pstate.turbo_pstate;
@@ -1206,6 +1215,8 @@ static struct cpufreq_driver intel_pstate_driver = {
 static int __initdata no_load;
 static int __initdata no_hwp;
 static int __initdata hwp_only;
+static int __initdata vanilla_policy;
+static int __initdata server_policy;
 static unsigned int force_load;
 
 static int intel_pstate_msrs_not_valid(void)
@@ -1361,6 +1372,9 @@ static int __init intel_pstate_init(void)
 	int cpu, rc = 0;
 	const struct x86_cpu_id *id;
 	struct cpu_defaults *cpu_def;
+#if IS_ENABLED(CONFIG_ACPI)
+	const char *profile = NULL;
+#endif
 
 	if (no_load)
 		return -ENODEV;
@@ -1386,6 +1400,34 @@ static int __init intel_pstate_init(void)
 
 	pr_info("Intel P-state driver initializing.\n");
 
+#if IS_ENABLED(CONFIG_ACPI)
+	if (!vanilla_policy) {
+		switch (acpi_gbl_FADT.preferred_profile) {
+		case PM_WORKSTATION:
+			profile = "Workstation";
+			break;
+		case PM_ENTERPRISE_SERVER:
+			profile = "Enterprise Server";
+			break;
+		case PM_SOHO_SERVER:
+			profile = "SOHO Server";
+			break;
+		case PM_PERFORMANCE_SERVER:
+			profile = "Performance Server";
+			break;
+		default:
+			if (server_policy)
+				profile = "Server";
+		};
+
+		if (profile) {
+			pr_info("Intel P-state setting %s policy\n", profile);
+			copy_pid_params(&adj_server_policy);
+		}
+	}
+#endif
+
+
 	all_cpu_data = vzalloc(sizeof(void *) * num_possible_cpus());
 	if (!all_cpu_data)
 		return -ENOMEM;
@@ -1428,6 +1470,10 @@ static int __init intel_pstate_setup(char *str)
 
 	if (!strcmp(str, "disable"))
 		no_load = 1;
+	if (!strcmp(str, "vanilla_policy"))
+		vanilla_policy = 1;
+	if (!strcmp(str, "server_policy"))
+		server_policy = 1;
 	if (!strcmp(str, "no_hwp")) {
 		pr_info("intel_pstate: HWP disabled\n");
 		no_hwp = 1;
