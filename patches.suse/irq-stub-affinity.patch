From: Alexander Graf <agraf@suse.de>
Subject: Add stubs to ignore effective IRQ affinity
Patch-mainline: Never, only needed for less conflicts from upstream commits
References: FATE#323954

Upstream got a new effective affinity framework which we're missing in our
downstream tree. Add a few stubs that allow us to take upstream code
nevertheless and reuse it.

Signed-off-by: Alexander Graf <agraf@suse.de>

---
 include/linux/irq.h       |   10 ++++++++++
 include/linux/irqdomain.h |    8 ++++++++
 2 files changed, 18 insertions(+)

--- a/include/linux/irq.h
+++ b/include/linux/irq.h
@@ -275,6 +275,11 @@
 	return __irqd_to_state(d) & IRQD_LEVEL;
 }
 
+static inline void irqd_set_single_target(struct irq_data *d)
+{
+	/* agraf@suse.com: Stub out - we do not support single targets yet */
+}
+
 static inline bool irqd_is_wakeup_set(struct irq_data *d)
 {
 	return __irqd_to_state(d) & IRQD_WAKEUP_STATE;
@@ -743,6 +748,11 @@
 	return d->common->affinity;
 }
 
+static inline void irq_data_update_effective_affinity(struct irq_data *d,
+						      const struct cpumask *m)
+{
+}
+
 unsigned int arch_dynirq_lower_bound(unsigned int from);
 
 int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
--- a/include/linux/irqdomain.h
+++ b/include/linux/irqdomain.h
@@ -204,6 +204,14 @@
 
 #ifdef CONFIG_IRQ_DOMAIN
 struct fwnode_handle *irq_domain_alloc_fwnode(void *data);
+
+static inline
+struct fwnode_handle *irq_domain_alloc_named_id_fwnode(const char *name, int id)
+{
+	/* agraf@suse.com: We don't know what named domains are, stub out */
+	return irq_domain_alloc_fwnode(NULL);
+}
+
 void irq_domain_free_fwnode(struct fwnode_handle *fwnode);
 struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, int size,
 				    irq_hw_number_t hwirq_max, int direct_max,
