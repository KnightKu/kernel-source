Subject: sched: Provide boot option to disable sched_rt_runtime
From: Jack Steiner <steiner@sgi.com>
Patch-mainline: never, SUSE specific
References: bnc#610783

Very large machines may livelock due to scalability issues, so give the
user the ability to boot time disable realtime bandwidth control.

Signed-off-by: Mike Galbraith <mgalbraith@suse.de>
---
 Documentation/kernel-parameters.txt |    2 ++
 kernel/sched/core.c                 |   11 +++++++++++
 2 files changed, 13 insertions(+)

--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2847,6 +2847,8 @@ bytes respectively. Such letter suffixes
 	rtsched_debug   [KNL] Disallows borrowing of excess rt_runtime from neighboring runqueues.
 			  /proc/sys/kernel/sched_rt_runtime_us becomes a hard limit per runqueue.
 
+	nortsched       [KNL] Disables realtime task bandwidth control.
+
 	skew_tick=	[KNL] Offset the periodic timer tick per cpu to mitigate
 			xtime_lock contention on larger systems, and/or RCU lock
 			contention on all systems with CONFIG_MAXSMP set.
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -297,6 +297,17 @@ __read_mostly int scheduler_running;
 int sysctl_sched_rt_runtime = 950000;
 
 /*
+ * Bootline option to disable sched_rt_runtime.  Otherwise very large
+ * systems may livelock during boot.
+ */
+static int __init parse_nortsched(char *arg)
+{
+	sysctl_sched_rt_runtime = -1;
+	return 0;
+}
+early_param("nortsched", parse_nortsched);
+
+/*
  * __task_rq_lock - lock the rq @p resides on.
  */
 static inline struct rq *__task_rq_lock(struct task_struct *p)
