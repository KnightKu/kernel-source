From: Elena Reshetova <elena.reshetova@intel.com>
Date: Mon, 4 Sep 2017 13:11:44 +0300
Subject: bpf: prevent speculative execution in eBPF interpreter
Patch-mainline: submitted on 2018/1/9
References: bnc#1068032

This adds a generic memory barrier before LD_IMM_DW and
LDX_MEM_B/H/W/DW eBPF instructions during eBPF program
execution in order to prevent speculative execution on out
of bound BFP_MAP array indexes. This way an arbitary kernel
memory is not exposed through side channel attacks.

For more details, please see this Google Project Zero report: tbd

Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 net/core/filter.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -39,6 +39,7 @@
 #include <linux/filter.h>
 #include <linux/reciprocal_div.h>
 #include <linux/ratelimit.h>
+#include <linux/system.h>
 
 /* No hurry in this branch */
 static void *__load_pointer(const struct sk_buff *skb, int k, unsigned int size)
@@ -266,9 +267,11 @@
 			X = K;
 			continue;
 		case BPF_S_LD_MEM:
+			gmb();
 			A = mem[K];
 			continue;
 		case BPF_S_LDX_MEM:
+			gmb();
 			X = mem[K];
 			continue;
 		case BPF_S_MISC_TAX:
