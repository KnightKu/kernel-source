From: Miroslav Benes <mbenes@suse.cz>
Date: Tue, 25 Nov 2014 15:21:25 +0100
Subject: kgr: prevent recursive loops of stubs in ftrace
Patch-mainline: submitted for review
References: fate#313296

To prevent ftrace going into recursive loop ftrace_ops->func and all the
functions it calls have to be labeled with "notrace" attribute.

The stubs call only static inline functions and pr_debug (printk). Inline
functions are ok from this point of view, however we need to remove pr_debug
calls. If they stayed we would not be able to patch printk functions safely.

This also applies to stubs themselves. Without notrace label the recursion is
inevitable while patching the stubs. Label effectively forbids their patching
though.

Signed-off-by: Miroslav Benes <mbenes@suse.cz>
Acked-by: Petr Mladek <pmladek@suse.cz>
Reviewed-by: Jiri Kosina <jkosina@suse.cz>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kernel/kgraft.c | 16 ++++++----------
 1 file changed, 6 insertions(+), 10 deletions(-)

diff --git a/kernel/kgraft.c b/kernel/kgraft.c
index 957078ea426d..663c58a90a35 100644
--- a/kernel/kgraft.c
+++ b/kernel/kgraft.c
@@ -56,17 +56,18 @@ static DECLARE_BITMAP(kgr_immutable, 1);
 /*
  * The stub needs to modify the RIP value stored in struct pt_regs
  * so that ftrace redirects the execution properly.
+ *
+ * Stubs have to be labeled with notrace to prevent recursion loop in ftrace.
  */
-static void kgr_stub_fast(unsigned long ip, unsigned long parent_ip,
+static notrace void kgr_stub_fast(unsigned long ip, unsigned long parent_ip,
 		struct ftrace_ops *ops, struct pt_regs *regs)
 {
 	struct kgr_patch_fun *p = ops->private;
 
-	pr_debug("kgr: fast stub: calling new code at %lx\n", p->loc_new);
 	kgr_set_regs_ip(regs, p->loc_new);
 }
 
-static void kgr_stub_slow(unsigned long ip, unsigned long parent_ip,
+static notrace void kgr_stub_slow(unsigned long ip, unsigned long parent_ip,
 		struct ftrace_ops *ops, struct pt_regs *regs)
 {
 	struct kgr_patch_fun *p = ops->private;
@@ -85,15 +86,10 @@ static void kgr_stub_slow(unsigned long ip, unsigned long parent_ip,
 	if (p->state == KGR_PATCH_REVERT_SLOW)
 		go_old = !go_old;
 
-	if (go_old) {
-		pr_debug("kgr: slow stub: calling old code at %lx\n",
-				p->loc_old);
+	if (go_old)
 		kgr_set_regs_ip(regs, p->loc_old + MCOUNT_INSN_SIZE);
-	} else {
-		pr_debug("kgr: slow stub: calling new code at %lx\n",
-				p->loc_new);
+	else
 		kgr_set_regs_ip(regs, p->loc_new);
-	}
 }
 
 static void kgr_refs_inc(void)
-- 
2.1.3

