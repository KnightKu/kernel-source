From: Jiri Kosina <jkosina@suse.cz>
Date: Sun, 15 Sep 2013 21:36:47 +0200
Subject: kgr: initial code
Patch-mainline: not yet, kgraft
References: fate#313296 bnc#905087 bnc#929883 bnc#943989

Provide initial implementation. We are now able to do ftrace-based
runtime patching of the kernel code.

In addition to that, we will provide a kgr_patcher module in the next
patch to test the functionality.

Note that the per-process flag dismisses in later patches where it is
converted to a single bit in the thread_info.

Limitation: kGraft is x86_64 only yet

Additional squashes to this patch:
jk: add missing Kconfig.kgr
jk: fixup a header bug
jk: cleanup comments
js: port to new mcount infrastructure
js: order includes
js: fix for non-KGR (prototype and Kconfig fixes)
js: fix potential lock imbalance in kgr_patch_code
js: use insn helper for jmp generation
js: add \n to a printk
jk: externally_visible attribute warning fix
jk: symbol lookup failure handling
jk: fix race between patching and setting a flag (thanks to bpetkov)
js: add more sanity checking
js: handle missing kallsyms gracefully
js: use correct name, not alias
js: fix index in cleanup path
js: clear kgr_in_progress for all syscall paths
js: cleanup
js: do the checking in the process context
js: call kgr_mark_processes outside loop and locks
jk: convert from raw patching to ftrace API
jk: depend on regs-saving ftrace
js: make kgr_init an init_call
js: use correct offset for stub
js: use pr_debug
js: use IS_ENABLED
js: fix potential memory leak
js: change names from kgr -> kGraft
js: fix error handling and return values
js: use bitops to be atomic
jk: helpers for task's kgr_in_progress
js: remove copies of stubs, have only a single instance
js: fix print loglevels and remove a stale comment
js: once more ^^^^^^^^^
js: rename kgr_start_patching to kgr_patch_kernel
js: massive cleanup and documentation
js: handle patch module refcount internally
js: remove the need of attribute used
js: make all the structs self-contained
js: add some comments
js: remove filter properly
pm: better name for kgr_for_each_patch_fun
js: move the kgr_ftrace a bit upper
js: procfs interface for per-process 'kgr_in_progress'
js: per-process 'in progress' is a single bit
mb: prevent recursive loops of stubs in ftrace
lp: rephrase the "kGraft failed" message
jk: lower the workqueue scheduling timeout
jk: x86: refuse to build without fentry support
jk: x86: make build possible on x86_64 only
js: use for_each_process_thread
js: fix race of stub and patching
jk: expose global 'in_progress' state through sysfs
js: add state machine to a patch
js: move the logic to kgr_patch_code's switch
pm: add patch information into sysfs
js: support revert of patches
js: add s390 support
js: fix ugly race
pm: avoid potential races in kgr_finalize()
mb: take switching of the fops out of kgr_patch_code to new function
mb: handle the failure of finalization stage
pm: remove the confusing search for fentry
pm: safe way to avoid an infinite redirection
mb: do not print error for !abort_if_missing symbols

Signed-off-by: Jiri Kosina <jkosina@suse.cz> [fixes]
Signed-off-by: Petr Mladek <pmladek@suse.cz> [fixes]
Signed-off-by: Miroslav Benes <mbenes@suse.cz> [fixes]
Signed-off-by: Libor Pechacek <lpechacek@suse.cz> [fixes]
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Cc: Steven Rostedt <rostedt@goodmis.org>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Andi Kleen <andi@firstfloor.org>
---
 MAINTAINERS                    |   10 
 arch/s390/Kconfig              |    3 
 arch/s390/include/asm/kgraft.h |   27 ++
 arch/x86/Kconfig               |    2 
 arch/x86/include/asm/kgraft.h  |    6 
 include/linux/kgraft.h         |  105 ++++++++
 kernel/Kconfig.kgraft          |   13 +
 kernel/Makefile                |    1 
 kernel/kgraft.c                |  491 +++++++++++++++++++++++++++++++++++++++++
 kernel/kgraft_files.c          |  173 ++++++++++++++
 10 files changed, 831 insertions(+)
 create mode 100644 arch/s390/include/asm/kgraft.h
 create mode 100644 arch/x86/include/asm/kgraft.h
 create mode 100644 include/linux/kgraft.h
 create mode 100644 kernel/Kconfig.kgraft
 create mode 100644 kernel/kgraft.c
 create mode 100644 kernel/kgraft_files.c

--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -6171,6 +6171,16 @@ F:	include/linux/kdb.h
 F:	include/linux/kgdb.h
 F:	kernel/debug/
 
+KGRAFT
+M:	Jiri Kosina <jkosina@suse.com>
+M:	Jiri Slaby <jslaby@suse.com>
+M:	Vojtech Pavlik <vojtech@suse.com>
+F:	Documentation/kgraft.txt
+F:	arch/*/include/asm/kgraft.h
+F:	include/linux/kgraft.h
+F:	kernel/kgraft*
+F:	samples/kgraft/
+
 KMEMCHECK
 M:	Vegard Nossum <vegardno@ifi.uio.no>
 M:	Pekka Enberg <penberg@kernel.org>
--- a/arch/s390/Kconfig
+++ b/arch/s390/Kconfig
@@ -138,6 +138,7 @@ config S390
 	select HAVE_KERNEL_LZMA
 	select HAVE_KERNEL_LZO
 	select HAVE_KERNEL_XZ
+	select HAVE_KGRAFT
 	select HAVE_KPROBES
 	select HAVE_KRETPROBES
 	select HAVE_KVM
@@ -173,6 +174,8 @@ source "init/Kconfig"
 
 source "kernel/Kconfig.freezer"
 
+source "kernel/Kconfig.kgraft"
+
 source "kernel/livepatch/Kconfig"
 
 menu "Processor type and features"
--- /dev/null
+++ b/arch/s390/include/asm/kgraft.h
@@ -0,0 +1,27 @@
+/*
+ * kGraft Online Kernel Patching
+ *
+ *  Copyright (c) 2013-2014 SUSE
+ *   Authors: Jiri Kosina
+ *	      Vojtech Pavlik
+ *	      Jiri Slaby
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#ifndef ASM_KGR_H
+#define ASM_KGR_H
+
+struct task_struct;
+
+static inline bool kgr_needs_lazy_migration(struct task_struct *p)
+{
+	return true;
+}
+
+#endif
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -118,6 +118,7 @@ config X86
 	select HAVE_KERNEL_LZMA
 	select HAVE_KERNEL_LZO
 	select HAVE_KERNEL_XZ
+	select HAVE_KGRAFT			if X86_64
 	select HAVE_KPROBES
 	select HAVE_KPROBES_ON_FTRACE
 	select HAVE_KRETPROBES
@@ -297,6 +298,7 @@ config PGTABLE_LEVELS
 
 source "init/Kconfig"
 source "kernel/Kconfig.freezer"
+source "kernel/Kconfig.kgraft"
 
 menu "Processor type and features"
 
--- /dev/null
+++ b/arch/x86/include/asm/kgraft.h
@@ -0,0 +1,6 @@
+#ifndef ASM_KGR_H
+#define ASM_KGR_H
+
+/* nothing to do here, all handled by LIVEPATCH */
+
+#endif
--- /dev/null
+++ b/include/linux/kgraft.h
@@ -0,0 +1,105 @@
+/*
+ * kGraft Online Kernel Patching
+ *
+ *  Copyright (c) 2013-2014 SUSE
+ *   Authors: Jiri Kosina
+ *	      Vojtech Pavlik
+ *	      Jiri Slaby
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#ifndef LINUX_KGRAFT_H
+#define LINUX_KGRAFT_H
+
+#include <linux/bitops.h>
+#include <linux/kobject.h>
+#include <linux/ftrace.h>
+#include <linux/sched.h>
+
+#if IS_ENABLED(CONFIG_KGRAFT)
+
+#include <asm/kgraft.h>
+
+#define KGR_TIMEOUT 2
+
+/**
+ * struct kgr_patch_fun -- state of a single function in a kGraft patch
+ *
+ * @name: function to patch
+ * @new_fun: function with the new body
+ * @loc_old: cache of @name's function address
+ * @ftrace_ops_slow: ftrace ops for slow (temporary) stub
+ * @ftrace_ops_fast: ftrace ops for fast () stub
+ */
+struct kgr_patch_fun {
+	const char *name;
+	void *new_fun;
+
+	bool abort_if_missing;
+	enum kgr_patch_state {
+		KGR_PATCH_INIT,
+		KGR_PATCH_SLOW,
+		KGR_PATCH_APPLIED,
+
+		KGR_PATCH_REVERT_SLOW,
+		KGR_PATCH_REVERTED,
+
+		KGR_PATCH_SKIPPED,
+	} state;
+
+	unsigned long loc_old;
+
+	struct ftrace_ops ftrace_ops_slow;
+	struct ftrace_ops ftrace_ops_fast;
+};
+
+/**
+ * struct kgr_patch -- a kGraft patch
+ *
+ * @kobj: object representing the sysfs entry
+ * @finish: waiting till it is safe to remove the module with the patch
+ * @name: name of the patch (to appear in sysfs)
+ * @owner: module to refcount on patching
+ * @patches: array of @kgr_patch_fun structures
+ */
+struct kgr_patch {
+	/* internal state information */
+	struct kobject kobj;
+	struct completion finish;
+
+	/* a patch shall set these */
+	const char *name;
+	struct module *owner;
+	struct kgr_patch_fun patches[];
+};
+
+#define kgr_for_each_patch_fun(p, pf)	\
+	for (pf = p->patches; pf->name; pf++)
+
+#define KGR_PATCH(_name, _new_function, abort)	{			\
+		.name = #_name,						\
+		.new_fun = _new_function,				\
+		.abort_if_missing = abort,				\
+	}
+#define KGR_PATCH_END				{ }
+
+extern bool kgr_in_progress;
+
+extern int kgr_patch_kernel(struct kgr_patch *);
+extern void kgr_patch_remove(struct kgr_patch *);
+
+extern int kgr_modify_kernel(struct kgr_patch *patch, bool revert);
+extern int kgr_patch_dir_add(struct kgr_patch *patch);
+extern void kgr_patch_dir_del(struct kgr_patch *patch);
+extern int kgr_add_files(void);
+extern void kgr_remove_files(void);
+
+#endif /* IS_ENABLED(CONFIG_KGRAFT) */
+
+#endif /* LINUX_KGRAFT_H */
--- /dev/null
+++ b/kernel/Kconfig.kgraft
@@ -0,0 +1,13 @@
+config HAVE_KGRAFT
+	bool
+
+config KGRAFT
+	bool "kGraft infrastructure"
+	depends on DYNAMIC_FTRACE_WITH_REGS
+	depends on HAVE_KGRAFT
+	depends on LIVEPATCH
+	help
+	  Select this to enable kGraft live kernel patching. The
+	  runtime penalty is nearly zero, so it is safe to say Y here
+	  if you want the kernel to expose the API for live patching
+	  to modules.
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -30,6 +30,7 @@ obj-y += irq/
 obj-y += rcu/
 obj-y += livepatch/
 
+obj-$(CONFIG_KGRAFT) += kgraft.o kgraft_files.o
 obj-$(CONFIG_CHECKPOINT_RESTORE) += kcmp.o
 obj-$(CONFIG_FREEZER) += freezer.o
 obj-$(CONFIG_PROFILING) += profile.o
--- /dev/null
+++ b/kernel/kgraft.c
@@ -0,0 +1,491 @@
+/*
+ * kGraft Online Kernel Patching
+ *
+ *  Copyright (c) 2013-2014 SUSE
+ *   Authors: Jiri Kosina
+ *	      Vojtech Pavlik
+ *	      Jiri Slaby
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#include <linux/bitmap.h>
+#include <linux/bug.h>
+#include <linux/ftrace.h>
+#include <linux/kallsyms.h>
+#include <linux/kgraft.h>
+#include <linux/livepatch.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/sort.h>
+#include <linux/spinlock.h>
+#include <linux/types.h>
+#include <linux/workqueue.h>
+
+static int kgr_patch_code(struct kgr_patch_fun *patch_fun, bool final,
+		bool revert);
+static void kgr_work_fn(struct work_struct *work);
+
+static struct workqueue_struct *kgr_wq;
+static DECLARE_DELAYED_WORK(kgr_work, kgr_work_fn);
+static DEFINE_MUTEX(kgr_in_progress_lock);
+bool kgr_in_progress;
+static bool kgr_initialized;
+static struct kgr_patch *kgr_patch;
+static bool kgr_revert;
+/*
+ * Setting the per-process flag and stub instantiation has to be performed
+ * "atomically", otherwise the flag might get cleared and old function called
+ * during the race window.
+ *
+ * kgr_immutable is an atomic flag which signals whether we are in the
+ * actual race window and lets the stub take a proper action (reset the
+ * 'in progress' state)
+ */
+static DECLARE_BITMAP(kgr_immutable, 1);
+
+/*
+ * The stub needs to modify the RIP value stored in struct pt_regs
+ * so that ftrace redirects the execution properly.
+ *
+ * Stubs have to be labeled with notrace to prevent recursion loop in ftrace.
+ */
+static notrace void kgr_stub_fast(unsigned long ip, unsigned long parent_ip,
+		struct ftrace_ops *ops, struct pt_regs *regs)
+{
+	struct kgr_patch_fun *p = ops->private;
+
+	klp_arch_set_pc(regs, (unsigned long)p->new_fun);
+}
+
+static notrace void kgr_stub_slow(unsigned long ip, unsigned long parent_ip,
+		struct ftrace_ops *ops, struct pt_regs *regs)
+{
+	struct kgr_patch_fun *p = ops->private;
+	bool go_new;
+
+	if (current->flags & PF_KTHREAD) {
+		go_new = true;
+	} else if (test_bit(0, kgr_immutable)) {
+		klp_kgraft_mark_task_in_progress(current);
+		go_new = false;
+	} else {
+		rmb(); /* test_bit before kgr_mark_task_in_progress */
+		go_new = !klp_kgraft_task_in_progress(current);
+	}
+
+	if (p->state == KGR_PATCH_REVERT_SLOW)
+		go_new = !go_new;
+
+	/* Redirect the function unless we continue with the original one. */
+	if (go_new)
+		klp_arch_set_pc(regs, (unsigned long)p->new_fun);
+}
+
+static int kgr_ftrace_enable(struct kgr_patch_fun *pf, struct ftrace_ops *fops)
+{
+	int ret;
+
+	ret = ftrace_set_filter_ip(fops, pf->loc_old, 0, 0);
+	if (ret)
+		return ret;
+
+	ret = register_ftrace_function(fops);
+	if (ret)
+		ftrace_set_filter_ip(fops, pf->loc_old, 1, 0);
+
+	return ret;
+}
+
+static int kgr_ftrace_disable(struct kgr_patch_fun *pf, struct ftrace_ops *fops)
+{
+	int ret;
+
+	ret = unregister_ftrace_function(fops);
+	if (ret)
+		return ret;
+
+	ret = ftrace_set_filter_ip(fops, pf->loc_old, 1, 0);
+	if (ret)
+		register_ftrace_function(fops);
+
+	return ret;
+}
+
+static bool kgr_still_patching(void)
+{
+	struct task_struct *p, *t;
+	bool failed = false;
+
+	read_lock(&tasklist_lock);
+	for_each_process_thread(p, t) {
+		/*
+		 * TODO
+		 *   kernel thread codepaths not supported and silently ignored
+		 */
+		if (klp_kgraft_task_in_progress(t) &&
+				!(t->flags & PF_KTHREAD)) {
+			failed = true;
+			goto unlock;
+		}
+	}
+unlock:
+	read_unlock(&tasklist_lock);
+	return failed;
+}
+
+static void kgr_finalize(void)
+{
+	struct kgr_patch_fun *patch_fun;
+	int ret;
+
+	mutex_lock(&kgr_in_progress_lock);
+
+	kgr_for_each_patch_fun(kgr_patch, patch_fun) {
+		ret = kgr_patch_code(patch_fun, true, kgr_revert);
+
+		if (ret < 0) {
+			pr_err("kgr: finalization for %s failed (%d). System in inconsistent state with no way out.\n",
+				patch_fun->name, ret);
+			BUG();
+		}
+	}
+
+	if (kgr_revert)
+		module_put(kgr_patch->owner);
+
+	kgr_patch = NULL;
+	kgr_in_progress = false;
+
+	pr_info("kgr succeeded\n");
+
+	mutex_unlock(&kgr_in_progress_lock);
+}
+
+static void kgr_work_fn(struct work_struct *work)
+{
+	static bool printed = false;
+
+	if (kgr_still_patching()) {
+		if (!printed) {
+			pr_info("kgr still in progress after timeout, will keep"
+					" trying every %d seconds\n",
+				KGR_TIMEOUT);
+			printed = true;
+		}
+		/* recheck again later */
+		queue_delayed_work(kgr_wq, &kgr_work, KGR_TIMEOUT * HZ);
+		return;
+	}
+
+	/*
+	 * victory, patching finished, put everything back in shape
+	 * with as less performance impact as possible again
+	 */
+	kgr_finalize();
+	printed = false;
+}
+
+static void kgr_handle_processes(void)
+{
+	struct task_struct *p, *t;
+
+	read_lock(&tasklist_lock);
+	for_each_process_thread(p, t) {
+		klp_kgraft_mark_task_in_progress(t);
+	}
+	read_unlock(&tasklist_lock);
+}
+
+static unsigned long kgr_get_function_address(const struct kgr_patch_fun *pf)
+{
+	unsigned long orig_addr;
+	const char *check_name;
+	char check_buf[KSYM_SYMBOL_LEN];
+
+	orig_addr = kallsyms_lookup_name(pf->name);
+	if (!orig_addr) {
+		if (pf->abort_if_missing)
+			pr_err("kgr: function %s not resolved\n", pf->name);
+		return -ENOENT;
+	}
+
+	check_name = kallsyms_lookup(orig_addr, NULL, NULL, NULL, check_buf);
+	if (strcmp(check_name, pf->name)) {
+		pr_err("kgr: we got out of bounds the intended function (%s -> %s)\n",
+				pf->name, check_name);
+		return -EINVAL;
+	}
+
+	return orig_addr;
+}
+
+static int kgr_switch_fops(struct kgr_patch_fun *patch_fun,
+		struct ftrace_ops *new_fops, struct ftrace_ops *unreg_fops)
+{
+	int err;
+
+	if (new_fops) {
+		err = kgr_ftrace_enable(patch_fun, new_fops);
+		if (err) {
+			pr_err("kgr: cannot enable ftrace function for %s (%lx, %d)\n",
+				patch_fun->name, patch_fun->loc_old, err);
+			return err;
+		}
+	}
+
+	/*
+	 * Get rid of the other stub. Having two stubs in the interim is fine.
+	 * The first one registered always "wins", as it'll be dragged last from
+	 * the ftrace hashtable. The redirected RIP however currently points to
+	 * the same function in both stubs.
+	 */
+	if (unreg_fops) {
+		err = kgr_ftrace_disable(patch_fun, unreg_fops);
+		if (err) {
+			pr_err("kgr: disabling ftrace function for %s failed (%d)\n",
+				patch_fun->name, err);
+			/*
+			 * In case of failure we do not know which state we are
+			 * in. There is something wrong going on in kGraft of
+			 * ftrace, so better BUG.
+			 */
+			BUG();
+		}
+	}
+
+	return 0;
+}
+
+static int kgr_init_ftrace_ops(struct kgr_patch_fun *patch_fun)
+{
+	struct ftrace_ops *fops;
+	unsigned long addr;
+
+	/* Cache missing addresses. */
+	addr = kgr_get_function_address(patch_fun);
+	if (IS_ERR_VALUE(addr))
+		return addr;
+
+	pr_debug("kgr: storing %lx to loc_old for %s\n",
+			addr, patch_fun->name);
+	patch_fun->loc_old = addr;
+
+	/* Initialize ftrace_ops structures for fast and slow stubs. */
+	fops = &patch_fun->ftrace_ops_fast;
+	fops->private = patch_fun;
+	fops->func = kgr_stub_fast;
+	fops->flags = FTRACE_OPS_FL_SAVE_REGS;
+
+	fops = &patch_fun->ftrace_ops_slow;
+	fops->private = patch_fun;
+	fops->func = kgr_stub_slow;
+	fops->flags = FTRACE_OPS_FL_SAVE_REGS;
+
+	return 0;
+}
+
+static int kgr_patch_code(struct kgr_patch_fun *patch_fun, bool final,
+		bool revert)
+{
+	struct ftrace_ops *new_ops = NULL, *unreg_ops = NULL;
+	enum kgr_patch_state next_state;
+	int err;
+
+	switch (patch_fun->state) {
+	case KGR_PATCH_INIT:
+		if (revert || final)
+			return -EINVAL;
+		err = kgr_init_ftrace_ops(patch_fun);
+		if (err) {
+			if (err == -ENOENT && !patch_fun->abort_if_missing) {
+				patch_fun->state = KGR_PATCH_SKIPPED;
+				return 0;
+			}
+			return err;
+		}
+
+		next_state = KGR_PATCH_SLOW;
+		new_ops = &patch_fun->ftrace_ops_slow;
+		break;
+	case KGR_PATCH_SLOW:
+		if (revert || !final)
+			return -EINVAL;
+		next_state = KGR_PATCH_APPLIED;
+		new_ops = &patch_fun->ftrace_ops_fast;
+		unreg_ops = &patch_fun->ftrace_ops_slow;
+		break;
+	case KGR_PATCH_APPLIED:
+		if (!revert || final)
+			return -EINVAL;
+		next_state = KGR_PATCH_REVERT_SLOW;
+		new_ops = &patch_fun->ftrace_ops_slow;
+		unreg_ops = &patch_fun->ftrace_ops_fast;
+		break;
+	case KGR_PATCH_REVERT_SLOW:
+		if (!revert || !final)
+			return -EINVAL;
+		next_state = KGR_PATCH_REVERTED;
+		unreg_ops = &patch_fun->ftrace_ops_slow;
+		break;
+	case KGR_PATCH_SKIPPED:
+		return 0;
+	default:
+		return -EINVAL;
+	}
+
+	/*
+	 * In case of error the caller can still have a chance to restore the
+	 * previous consistent state.
+	 */
+	err = kgr_switch_fops(patch_fun, new_ops, unreg_ops);
+	if (err)
+		return err;
+
+	patch_fun->state = next_state;
+
+	pr_debug("kgr: redirection for %s done\n", patch_fun->name);
+
+	return 0;
+}
+
+int kgr_modify_kernel(struct kgr_patch *patch, bool revert)
+{
+	struct kgr_patch_fun *patch_fun;
+	int ret;
+
+	if (!kgr_initialized) {
+		pr_err("kgr: can't patch, not initialized\n");
+		return -EINVAL;
+	}
+
+	mutex_lock(&kgr_in_progress_lock);
+	if (kgr_in_progress) {
+		pr_err("kgr: can't patch, another patching not yet finalized\n");
+		ret = -EAGAIN;
+		goto err_unlock;
+	}
+
+	set_bit(0, kgr_immutable);
+	wmb(); /* set_bit before kgr_handle_processes */
+
+	kgr_for_each_patch_fun(patch, patch_fun) {
+		ret = kgr_patch_code(patch_fun, false, revert);
+		/*
+		 * In case any of the symbol resolutions in the set
+		 * has failed, patch all the previously replaced fentry
+		 * callsites back to nops and fail with grace
+		 */
+		if (ret < 0) {
+			for (patch_fun--; patch_fun >= patch->patches;
+					patch_fun--)
+				if (patch_fun->state == KGR_PATCH_SLOW)
+					kgr_ftrace_disable(patch_fun,
+						&patch_fun->ftrace_ops_slow);
+			goto err_unlock;
+		}
+	}
+	kgr_in_progress = true;
+	kgr_patch = patch;
+	kgr_revert = revert;
+	mutex_unlock(&kgr_in_progress_lock);
+
+	kgr_handle_processes();
+	wmb(); /* clear_bit after kgr_handle_processes */
+	clear_bit(0, kgr_immutable);
+
+	/*
+	 * give everyone time to exit kernel, and check after a while
+	 */
+	queue_delayed_work(kgr_wq, &kgr_work, KGR_TIMEOUT * HZ);
+
+	return 0;
+err_unlock:
+	mutex_unlock(&kgr_in_progress_lock);
+
+	return ret;
+}
+
+/**
+ * kgr_patch_kernel -- the entry for a kgraft patch
+ * @patch: patch to be applied
+ *
+ * Start patching of code that is neither running in IRQ context nor
+ * kernel thread.
+ */
+int kgr_patch_kernel(struct kgr_patch *patch)
+{
+	int ret;
+
+	if (!try_module_get(patch->owner)) {
+		pr_err("kgr: can't increase patch module refcount\n");
+		return -EBUSY;
+	}
+
+	init_completion(&patch->finish);
+
+	ret = kgr_patch_dir_add(patch);
+	if (ret)
+		goto err_put;
+
+	ret = kgr_modify_kernel(patch, false);
+	if (ret)
+		goto err_dir_del;
+
+	return ret;
+err_dir_del:
+	kgr_patch_dir_del(patch);
+err_put:
+	module_put(patch->owner);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(kgr_patch_kernel);
+
+/**
+ * kgr_patch_remove -- module with this patch is leaving
+ *
+ * @patch: this patch is going away
+ */
+void kgr_patch_remove(struct kgr_patch *patch)
+{
+	kgr_patch_dir_del(patch);
+}
+EXPORT_SYMBOL_GPL(kgr_patch_remove);
+
+static int __init kgr_init(void)
+{
+	int ret;
+
+	if (ftrace_is_dead()) {
+		pr_warn("kgr: enabled, but ftrace is disabled ... aborting\n");
+		return -ENODEV;
+	}
+
+	ret = kgr_add_files();
+	if (ret)
+		return ret;
+
+	kgr_wq = create_singlethread_workqueue("kgraft");
+	if (!kgr_wq) {
+		pr_err("kgr: cannot allocate a work queue, aborting!\n");
+		ret = -ENOMEM;
+		goto err_remove_files;
+	}
+
+	kgr_initialized = true;
+	pr_info("kgr: successfully initialized\n");
+
+	return 0;
+err_remove_files:
+	kgr_remove_files();
+
+	return ret;
+}
+module_init(kgr_init);
--- /dev/null
+++ b/kernel/kgraft_files.c
@@ -0,0 +1,173 @@
+/*
+ * kGraft Online Kernel Patching
+ *
+ *  Copyright (c) 2013-2014 SUSE
+ *   Authors: Jiri Kosina
+ *	      Vojtech Pavlik
+ *	      Jiri Slaby
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#include <linux/kernel.h>
+#include <linux/kgraft.h>
+#include <linux/kobject.h>
+#include <linux/module.h>
+#include <linux/sysfs.h>
+
+static struct kobject *kgr_sysfs_dir;
+
+static inline struct kgr_patch *kobj_to_patch(struct kobject *kobj)
+{
+	return container_of(kobj, struct kgr_patch, kobj);
+}
+
+static void kgr_patch_kobj_release(struct kobject *kobj)
+{
+	struct kgr_patch *p = kobj_to_patch(kobj);
+
+	complete(&p->finish);
+}
+
+static struct kobj_type kgr_patch_kobj_ktype = {
+	.release	= kgr_patch_kobj_release,
+	.sysfs_ops	= &kobj_sysfs_ops,
+};
+
+static ssize_t state_show(struct kobject *kobj, struct kobj_attribute *attr,
+		char *buf)
+{
+	struct kgr_patch *p = kobj_to_patch(kobj);
+	const struct kgr_patch_fun *pf;
+	ssize_t size;
+
+	size = snprintf(buf, PAGE_SIZE, "%-20s   Weak  State\n", "Function");
+
+
+	kgr_for_each_patch_fun(p, pf) {
+		size += snprintf(buf + size, PAGE_SIZE - size,
+				"%-20s  %5d  %5d\n", pf->name,
+				 !(pf->abort_if_missing), pf->state);
+	}
+	return size;
+}
+
+static ssize_t revert_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	struct kgr_patch *p = kobj_to_patch(kobj);
+	int ret;
+
+	ret = kgr_modify_kernel(p, true);
+
+	return ret < 0 ? ret : count;
+}
+
+static struct kobj_attribute kgr_attr_state = __ATTR_RO(state);
+static struct kobj_attribute kgr_attr_revert = __ATTR_WO(revert);
+
+static struct attribute *kgr_patch_sysfs_entries[] = {
+	&kgr_attr_state.attr,
+	&kgr_attr_revert.attr,
+	NULL
+};
+
+static struct attribute_group kgr_patch_sysfs_group = {
+	.attrs = kgr_patch_sysfs_entries,
+};
+
+int kgr_patch_dir_add(struct kgr_patch *patch)
+{
+	int ret;
+
+	ret = kobject_init_and_add(&patch->kobj, &kgr_patch_kobj_ktype,
+			kgr_sysfs_dir, patch->name);
+	if (ret)
+		return ret;
+
+#ifdef CONFIG_MODULES
+	if (patch->owner) {
+		ret = sysfs_create_link(&patch->kobj, &patch->owner->mkobj.kobj,
+				"owner");
+		if (ret)
+			goto err_put;
+	}
+#endif
+
+	ret = sysfs_create_group(&patch->kobj, &kgr_patch_sysfs_group);
+	if (ret)
+		goto err_del_link;
+
+	return 0;
+err_del_link:
+#ifdef CONFIG_MODULES
+	if (patch->owner)
+		sysfs_delete_link(&patch->kobj, &patch->owner->mkobj.kobj,
+				"owner");
+err_put:
+#endif
+	kobject_put(&patch->kobj);
+	return ret;
+}
+
+void kgr_patch_dir_del(struct kgr_patch *patch)
+{
+	sysfs_remove_group(&patch->kobj, &kgr_patch_sysfs_group);
+#ifdef CONFIG_MODULES
+	if (patch->owner)
+		sysfs_delete_link(&patch->kobj, &patch->owner->mkobj.kobj,
+				"owner");
+#endif
+	kobject_put(&patch->kobj);
+	wait_for_completion(&patch->finish);
+}
+
+static ssize_t in_progress_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", kgr_in_progress);
+}
+
+static struct kobj_attribute kgr_attr_in_progress = __ATTR_RO(in_progress);
+
+static struct attribute *kgr_sysfs_entries[] = {
+	&kgr_attr_in_progress.attr,
+	NULL
+};
+
+static struct attribute_group kgr_sysfs_group = {
+	.attrs = kgr_sysfs_entries,
+};
+
+int kgr_add_files(void)
+{
+	int ret;
+
+	kgr_sysfs_dir = kobject_create_and_add("kgraft", kernel_kobj);
+	if (!kgr_sysfs_dir) {
+		pr_err("kgr: cannot create kgraft directory in sysfs!\n");
+		return -EIO;
+	}
+
+	ret = sysfs_create_group(kgr_sysfs_dir, &kgr_sysfs_group);
+	if (ret) {
+		pr_err("kgr: cannot create attributes in sysfs\n");
+		goto err_put_sysfs;
+	}
+
+	return 0;
+err_put_sysfs:
+	kobject_put(kgr_sysfs_dir);
+	return ret;
+}
+
+void kgr_remove_files(void)
+{
+	sysfs_remove_group(kgr_sysfs_dir, &kgr_sysfs_group);
+	kobject_put(kgr_sysfs_dir);
+}
