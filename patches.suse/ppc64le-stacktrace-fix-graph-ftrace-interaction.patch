From: Nicolai Stange <nstange@suse.de>
Subject: ppc64le: reliable stacktrace: handle graph traced functions
Patch-mainline: Never, temporary fix to get things going here
References: bsc#1089664

Ftrace's graph tracing is implemented by temporarily redirecting
a function's return address. This causes the reliable stacktrace
implementation to miss callers of graph traced functions.

Fix this by resolving to the original caller with ftrace_graph_ret_addr().

Note that this is a temporary fix for
suse-commit a4da14cfd7a8 ("On ppc64le we HAVE_RELIABLE_STACKTRACE")
which is likely to get reworked anyway.

Signed-off-by: Nicolai Stange <nstange@suse.de>
---
 arch/powerpc/kernel/stacktrace.c |    6 ++++++
 1 file changed, 6 insertions(+)

--- a/arch/powerpc/kernel/stacktrace.c
+++ b/arch/powerpc/kernel/stacktrace.c
@@ -19,6 +19,9 @@
 #include <linux/stacktrace.h>
 #include <asm/ptrace.h>
 #include <asm/processor.h>
+#ifndef __GENKSYMS__
+#include <linux/ftrace.h>
+#endif
 
 /*
  * Save stack-backtrace addresses into a stack_trace buffer.
@@ -88,6 +91,7 @@ save_stack_trace_tsk_reliable(struct tas
 	unsigned long sp;
 	unsigned long stack_page = (unsigned long)task_stack_page(tsk);
 	unsigned long stack_end;
+	int graph_idx = 0;
 
 	/* The last frame (unwinding first) may not yet have saved
 	 * its LR onto the stack.
@@ -153,6 +157,8 @@ save_stack_trace_tsk_reliable(struct tas
 			return 1;
 		firstframe = 0;
 
+		ip = ftrace_graph_ret_addr(tsk, &graph_idx, ip, NULL);
+
 		if (!trace->skip)
 			trace->entries[trace->nr_entries++] = ip;
 		else
