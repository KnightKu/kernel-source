Subject: sched: reinstate sched_compat_yield
From: Mike Galbraith <mgalbraith@suse.de>
Date: Fri Oct  7 08:06:43 CEST 2011
Patch-mainline: never, SUSE specific
References: bnc#722449

Restore aggressive yield option to fix up partner performance regressions.

Quoting bugzilla:

Older software relies on the old yield behavior. And many IBM software,
especially the one used on System z in production, are  based on older Java
versions that have this problem. It's no question that newer software should
not be written that way. 
So removing the possibility to switch to the old behavior will break production
customers

Signed-off-by: Mike Galbraith <mgalbraith@suse.de>
---
 include/linux/sched/sysctl.h |    1 +
 kernel/sched/fair.c          |   33 +++++++++++++++++++++++++++++++--
 kernel/sysctl.c              |    9 +++++++++
 3 files changed, 41 insertions(+), 2 deletions(-)

--- a/include/linux/sched/sysctl.h
+++ b/include/linux/sched/sysctl.h
@@ -35,6 +35,7 @@ extern unsigned int sysctl_sched_latency
 extern unsigned int sysctl_sched_min_granularity;
 extern unsigned int sysctl_sched_wakeup_granularity;
 extern unsigned int sysctl_sched_child_runs_first;
+extern unsigned int sysctl_sched_compat_yield;
 
 enum sched_tunable_scaling {
 	SCHED_TUNABLESCALING_NONE,
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -80,6 +80,14 @@ static unsigned int sched_nr_latency = 3
 unsigned int sysctl_sched_child_runs_first __read_mostly;
 
 /*
+ * sys_sched_yield() compat mode
+ *
+ * This option switches the agressive yield implementation of the
+ * old scheduler back on.
+ */
+unsigned int sysctl_sched_compat_yield __read_mostly;
+
+/*
  * SCHED_OTHER wake-up granularity.
  * (default: 2.5 msec * (1 + ilog(ncpus)), units: nanoseconds)
  *
@@ -570,7 +578,6 @@ static struct sched_entity *__pick_next_
 	return rb_entry(next, struct sched_entity, run_node);
 }
 
-#ifdef CONFIG_SCHED_DEBUG
 struct sched_entity *__pick_last_entity(struct cfs_rq *cfs_rq)
 {
 	struct rb_node *last = rb_last(&cfs_rq->tasks_timeline);
@@ -581,6 +588,7 @@ struct sched_entity *__pick_last_entity(
 	return rb_entry(last, struct sched_entity, run_node);
 }
 
+#ifdef CONFIG_SCHED_DEBUG
 /**************************************************************
  * Scheduling class statistics methods:
  */
@@ -3749,7 +3757,7 @@ static void yield_task_fair(struct rq *r
 {
 	struct task_struct *curr = rq->curr;
 	struct cfs_rq *cfs_rq = task_cfs_rq(curr);
-	struct sched_entity *se = &curr->se;
+	struct sched_entity *se = &curr->se, *rightmost;
 
 	/*
 	 * Are we the only task in the tree?
@@ -3774,6 +3782,27 @@ static void yield_task_fair(struct rq *r
 	}
 
 	set_skip_buddy(se);
+
+	if (likely(!sysctl_sched_compat_yield))
+		return;
+
+	/*
+	 * Find the rightmost entry in the rbtree:
+	 */
+	rightmost = __pick_last_entity(cfs_rq);
+
+	/*
+	 * Already in the rightmost position?
+	 */
+	if (unlikely(!rightmost || entity_before(rightmost, se)))
+		return;
+
+	/*
+	 * Minimally necessary key value to be last in the tree:
+	 * Upon rescheduling, sched_class::put_prev_task() will place
+	 * 'current' within the tree based on its new key value.
+	 */
+	se->vruntime = rightmost->vruntime + 1;
 }
 
 static bool yield_to_task_fair(struct rq *rq, struct task_struct *p, bool preempt)
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -414,6 +414,15 @@ static struct ctl_table kern_table[] = {
 		.mode		= 0644,
 		.proc_handler	= sched_rr_handler,
 	},
+	{
+		.procname	= "sched_compat_yield",
+		.data		= &sysctl_sched_compat_yield,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1		= &zero,
+		.extra2		= &one,
+	},
 #ifdef CONFIG_SCHED_AUTOGROUP
 	{
 		.procname	= "sched_autogroup_enabled",
