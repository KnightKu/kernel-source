From 2998b69687ad68bc39c9357fe7ab7f247274f6d7 Mon Sep 17 00:00:00 2001
From: Joerg Roedel <jroedel@suse.de>
Date: Tue, 13 Mar 2018 15:10:29 +0100
Subject: [PATCH 05/17] x86/mm: Move KAISER functions from pgtable_64.h to
 pgtable.h
References: bsc#1068032 CVE-2017-5754
Patch-mainline: No, different upstream implementation

Make them usable from 32 and 64 bit code.

Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 arch/x86/include/asm/pgtable.h    | 25 +++++++++++++++++++++++++
 arch/x86/include/asm/pgtable_64.h | 23 -----------------------
 2 files changed, 25 insertions(+), 23 deletions(-)

diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
index f024df4..d8b76e0 100644
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@ -390,6 +390,29 @@ static inline int is_new_memtype_allowed(u64 paddr, unsigned long size,
 
 pmd_t *populate_extra_pmd(unsigned long vaddr);
 pte_t *populate_extra_pte(unsigned long vaddr);
+
+#ifdef CONFIG_KAISER
+extern pgd_t kaiser_set_shadow_pgd(pgd_t *pgdp, pgd_t pgd);
+
+static inline pgd_t *native_get_shadow_pgd(pgd_t *pgdp)
+{
+#ifdef CONFIG_DEBUG_VM
+	/* linux/mmdebug.h may not have been included at this point */
+	BUG_ON(!kaiser_enabled);
+#endif
+	return (pgd_t *)((unsigned long)pgdp | (unsigned long)PAGE_SIZE);
+}
+#else
+static inline pgd_t kaiser_set_shadow_pgd(pgd_t *pgdp, pgd_t pgd)
+{
+	return pgd;
+}
+static inline pgd_t *native_get_shadow_pgd(pgd_t *pgdp)
+{
+	return NULL;
+}
+#endif /* CONFIG_KAISER */
+
 #endif	/* __ASSEMBLY__ */
 
 #ifdef CONFIG_X86_32
@@ -546,6 +569,8 @@ static inline int pud_large(pud_t pud)
 }
 #endif	/* PAGETABLE_LEVELS > 2 */
 
+static inline int pgd_large(pgd_t pgd) { return 0; }
+
 #if PAGETABLE_LEVELS > 3
 static inline int pgd_present(pgd_t pgd)
 {
diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h
index a4a2b70..6e986c4 100644
--- a/arch/x86/include/asm/pgtable_64.h
+++ b/arch/x86/include/asm/pgtable_64.h
@@ -105,28 +105,6 @@ static inline void native_pud_clear(pud_t *pud)
 	native_set_pud(pud, native_make_pud(0));
 }
 
-#ifdef CONFIG_KAISER
-extern pgd_t kaiser_set_shadow_pgd(pgd_t *pgdp, pgd_t pgd);
-
-static inline pgd_t *native_get_shadow_pgd(pgd_t *pgdp)
-{
-#ifdef CONFIG_DEBUG_VM
-	/* linux/mmdebug.h may not have been included at this point */
-	BUG_ON(!kaiser_enabled);
-#endif
-	return (pgd_t *)((unsigned long)pgdp | (unsigned long)PAGE_SIZE);
-}
-#else
-static inline pgd_t kaiser_set_shadow_pgd(pgd_t *pgdp, pgd_t pgd)
-{
-	return pgd;
-}
-static inline pgd_t *native_get_shadow_pgd(pgd_t *pgdp)
-{
-	return NULL;
-}
-#endif /* CONFIG_KAISER */
-
 static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 	*pgdp = kaiser_set_shadow_pgd(pgdp, pgd);
@@ -147,7 +125,6 @@ extern void sync_global_pgds(unsigned long start, unsigned long end);
 /*
  * Level 4 access.
  */
-static inline int pgd_large(pgd_t pgd) { return 0; }
 #define mk_kernel_pgd(address) __pgd((address) | _KERNPG_TABLE)
 
 /* PUD - Level3 access */
-- 
1.8.5.6

