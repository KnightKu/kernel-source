From: Nicolai Stange <nstange@suse.de>
Subject: ppc64le: reliable stacktrace: fix .text check
Patch-mainline: Never, temporary fix to get things going here
References: bsc#1087458

The current ppc64le save_stack_trace_tsk_reliable() implementation
always reports an unreliable stacktrace for the swapper/0:0 task.

This is due to the initial swapper task having start_kernel() from
.init.text on its stack which doesn't pass the current .text check.

Using func_ptr_is_kernel_text() on return addresses is probably wrong
anyway because those return addresses don't point to function descriptors,
but to instructions. This happened to work on ppc64le because
dereference_function_descriptor() is defined to be the identity map
there.

However, let __kernel_text_address() do the job and accept
addresses from .init.text, too.

Note that this is a temporary fix for
suse-commit a4da14cfd7a8 ("On ppc64le we HAVE_RELIABLE_STACKTRACE")
which is likely to get reworked anyway.

Signed-off-by: Nicolai Stange <nstange@suse.de>

---
 arch/powerpc/kernel/stacktrace.c |   12 ++----------
 1 file changed, 2 insertions(+), 10 deletions(-)

--- a/arch/powerpc/kernel/stacktrace.c
+++ b/arch/powerpc/kernel/stacktrace.c
@@ -149,16 +149,8 @@ save_stack_trace_tsk_reliable(struct tas
 
 		/* Examine the saved LR: it must point into kernel code. */
 		ip = stack[STACK_FRAME_LR_SAVE];
-		if (!firstframe) {
-			if (!func_ptr_is_kernel_text((void *)ip)) {
-#ifdef CONFIG_MODULES
-				struct module *mod = __module_text_address(ip);
-
-				if (!mod)
-#endif
-					return 1;
-			}
-		}
+		if (!firstframe && !__kernel_text_address(ip))
+			return 1;
 		firstframe = 0;
 
 		if (!trace->skip)
