Subject: [PATCH] mm: memcg: introduce low_limit_in_bytes knob
From: Michal Hocko <mhocko@suse.cz>
Patch-mainline: never
References: fate#312101

The low limit reclaim is available since 241994ed8649 ("mm: memcontrol: default
hierarchy interface for memory") but the cgroup v2 (unified hierarchy) is still
marked in DEVEL mode in this kernel version. In order to provide the functionality
inow export the low limit into the userspace in the original cgroup interface.

The cgroup v2 interface should be used once the API gets stabilized (4.5).

Signed-off-by: Michal Hocko <mhocko@suse.cz>

---
 Documentation/cgroups/memory.txt |    1 +
 mm/memcontrol.c                  |   18 ++++++++++++++++++
 2 files changed, 19 insertions(+)

--- a/Documentation/cgroups/memory.txt
+++ b/Documentation/cgroups/memory.txt
@@ -63,6 +63,7 @@ Brief summary of control files.
 				 (See 5.5 for details)
  memory.limit_in_bytes		 # set/show limit of memory usage
  memory.memsw.limit_in_bytes	 # set/show limit of memory+Swap usage
+ memory.low_limit_in_bytes	 # set/show low limit for reclaim protection
  memory.failcnt			 # show the number of memory usage hits limits
  memory.memsw.failcnt		 # show the number of memory+Swap hits limits
  memory.max_usage_in_bytes	 # show max memory usage recorded
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -2849,6 +2849,7 @@ enum {
 	RES_MAX_USAGE,
 	RES_FAILCNT,
 	RES_SOFT_LIMIT,
+	RES_LOW_LIMIT,
 };
 
 static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *css,
@@ -2886,6 +2887,9 @@ static u64 mem_cgroup_read_u64(struct cg
 		return counter->failcnt;
 	case RES_SOFT_LIMIT:
 		return (u64)memcg->soft_limit * PAGE_SIZE;
+	case RES_LOW_LIMIT:
+		return (u64)memcg->low * PAGE_SIZE;
+		break;
 	default:
 		BUG();
 	}
@@ -3024,9 +3028,17 @@ static ssize_t mem_cgroup_write(struct k
 		}
 		break;
 	case RES_SOFT_LIMIT:
+		WARN(nr_pages != PAGE_COUNTER_MAX && memcg->low,
+				"Using soft limit with low limit is not supported.\n");
 		memcg->soft_limit = nr_pages;
 		ret = 0;
 		break;
+	case RES_LOW_LIMIT:
+		WARN(nr_pages && memcg->soft_limit != PAGE_COUNTER_MAX,
+				"Using soft limit with low limit is not supported.\n");
+		memcg->low = nr_pages;
+		ret = 0;
+		break;
 	}
 	return ret ?: nbytes;
 }
@@ -4032,6 +4044,12 @@ static struct cftype mem_cgroup_legacy_f
 		.write = mem_cgroup_write,
 		.read_u64 = mem_cgroup_read_u64,
 	},
+	{
+		.name = "low_limit_in_bytes",
+		.private = MEMFILE_PRIVATE(_MEM, RES_LOW_LIMIT),
+		.write = mem_cgroup_write,
+		.read_u64 = mem_cgroup_read_u64,
+	},
 	{
 		.name = "failcnt",
 		.private = MEMFILE_PRIVATE(_MEM, RES_FAILCNT),
