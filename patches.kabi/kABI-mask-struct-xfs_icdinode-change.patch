From c9b4b0d44cfc1dd6a3ada9b065c53d289fee5771 Mon Sep 17 00:00:00 2001
From: Nikolay Borisov <nborisov@suse.com>
Date: Wed, 22 Mar 2017 14:30:57 +0200
Subject: [PATCH 10/10] kABI: mask struct xfs_icdinode/xfs_inode changes
References: bsc#1024788
Patch-mainline: Never, kABI

Since we change a uint16 to, essentially, a uint32 but only for the incore
dinode object mask that out to prevent kabi failure. This is a private,
dynamically allocated struct so there shouldn't be problems changing its
size. The correct marshalling to xfs_dinode occurs so on-disk format is not
being changed.

Also mask out the removals of the i_size/i_new_size members of xfs_inode. This
shouldn't be a problem since xfs_inode are always allocated dynamically and 
initialized when a filesystem is mounted. 
---
 fs/xfs/xfs_inode.h |    9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@ -148,7 +148,11 @@ typedef struct xfs_icdinode {
 	__uint8_t	di_forkoff;	/* attr fork offs, <<3 for 64b align */
 	__int8_t	di_aformat;	/* format of attr fork's data */
 	__uint32_t	di_dmevmask;	/* DMIG event mask */
+#ifndef __GENKSYMS__
 	atomic_t	di_dmstate;	/* DMIG state info */
+#else
+	__uint16_t      di_dmstate;
+#endif
 	__uint16_t	di_flags;	/* random flags, XFS_DIFLAG_... */
 	__uint32_t	di_gen;		/* generation number */
 } xfs_icdinode_t;
@@ -255,7 +259,10 @@ typedef struct xfs_inode {
 	unsigned int		i_delayed_blks;	/* count of delay alloc blks */
 
 	xfs_icdinode_t		i_d;		/* most of ondisk inode */
-	
+#ifdef __GENKSYMS__
+	xfs_fsize_t			i_size;
+	xfs_fsize_t			i_new_size;
+#endif
 	atomic_t		i_iocount;	/* outstanding I/O count */
 
 	/* VFS inode */
