From: Jan Kara <jack@suse.cz>
Subject: fanotify: Fix deadlock with permission events
References: bsc#935053, bsc#926709
Patch-mainline: Never (part of commit 13116dfd13c8c)

When there are multiple threads sharing a notification group, a permission
event can get merged with event of other type. The logic in fanotify_merge()
then creates a new event for the merged one and replaces the original event
with the merged one in the group list. That however results in
fanotify_get_response_from_access() waiting forever for access response
because the event structure it waits for has been removed from the group list
and thus never gets updated with the response.

Fix the problem by never merging permission event with anything.

Signed-off-by: Jan Kara <jack@suse.cz>

---
 fs/notify/fanotify/fanotify.c |   10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

--- a/fs/notify/fanotify/fanotify.c
+++ b/fs/notify/fanotify/fanotify.c
@@ -19,9 +19,8 @@ static bool should_merge(struct fsnotify
 		switch (old->data_type) {
 		case (FSNOTIFY_EVENT_PATH):
 #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
-			/* dont merge two permission events */
-			if ((old->mask & FAN_ALL_PERM_EVENTS) &&
-			    (new->mask & FAN_ALL_PERM_EVENTS))
+			/* dont merge a permission event with anything else */
+			if (old->mask & FAN_ALL_PERM_EVENTS)
 				return false;
 #endif
 			if ((old->path.mnt == new->path.mnt) &&
@@ -47,6 +46,11 @@ static struct fsnotify_event *fanotify_m
 
 	pr_debug("%s: list=%p event=%p\n", __func__, list, event);
 
+#ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
+	/* dont merge a permission event with anything else */
+	if (event->mask & FAN_ALL_PERM_EVENTS)
+		return NULL;
+#endif
 
 	list_for_each_entry_reverse(test_holder, list, event_list) {
 		if (should_merge(test_holder->event, event)) {
