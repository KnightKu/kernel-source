From 8fa9a19974ed6bcf089e92530e531a2c6835f69b Mon Sep 17 00:00:00 2001
From: Jan Kara <jack@suse.cz>
Date: Mon, 29 May 2017 13:24:55 -0400
Subject: [PATCH 2/3] ext4: fix fdatasync(2) after extent manipulation
 operations
Git-commit: 67a7d5f561f469ad2fa5154d2888258ab8e6df7c
Patch-mainline: v4.12-rc5
References: bsc#1013018

Currently, extent manipulation operations such as hole punch, range
zeroing, or extent shifting do not record the fact that file data has
changed and thus fdatasync(2) has a work to do. As a result if we crash
e.g. after a punch hole and fdatasync, user can still possibly see the
punched out data after journal replay. Test generic/392 fails due to
these problems.

Fix the problem by properly marking that file data has changed in these
operations.

Cc: stable@vger.kernel.org
Fixes: a4bb6b64e39abc0e41ca077725f2a72c868e7622
Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>
Acked-by: Jan Kara <jack@suse.cz>

---
 fs/ext4/extents.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 35ff3ddd6f65..184fe363a799 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4369,6 +4369,8 @@ int ext4_ext_punch_hole(struct file *file, loff_t offset, loff_t length)
 
 	if (IS_SYNC(inode))
 		ext4_handle_sync(handle);
+	if (ret >= 0)
+		ext4_update_inode_fsync_trans(handle, inode, 1);
 
 	up_write(&EXT4_I(inode)->i_data_sem);
 
-- 
2.10.0

