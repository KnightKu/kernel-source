From: Daniel Borkmann <dborkman@redhat.com>
Date: Wed, 22 Jan 2014 02:29:39 +0100
Subject: random32: add prandom_u32_max
Patch-mainline: v3.14-rc1
Git-commit: f337db64af059c9a94278a8b0ab97d87259ff62f
References: bsc#989152

Many functions have open coded a function that returns a random
number in range [0,N-1]. Under the assumption that we have a PRNG
such as taus113 with being well distributed in [0, ~0U] space,
we can implement such a function as uword t = (n*m')>>32, where
m' is a random number obtained from PRNG, n the right open interval
border and t our resulting random number, with n,m',t in u32 universe.

Lets go with Joe and simply call it prandom_u32_max(), although
technically we have an right open interval endpoint, but that we
have documented. Other users can further be migrated to the new
prandom_u32_max() function later on.

Joint work with Hannes Frederic Sowa.

SLE11-SP[34]: Only provide the function, do not convert any existing
code. We also have only taus88 rather than taus113 but it's good enough
for the purposes prandom_u32_max() is going to be used.

Cc: Jakub Zawadzki <darkjames-ws@darkjames.pl>
Cc: Eric Dumazet <eric.dumazet@gmail.com>
Cc: linux-kernel@vger.kernel.org
Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Michal Kubecek <mkubecek@suse.cz>

---
 include/linux/random.h | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/include/linux/random.h b/include/linux/random.h
index 7e58ad27b7ff..6aa60b4c674d 100644
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@ -70,6 +70,23 @@ void srandom32(u32 seed);
 
 u32 prandom32(struct rnd_state *);
 
+/**
+ * prandom_u32_max - returns a pseudo-random number in interval [0, ep_ro)
+ * @ep_ro: right open interval endpoint
+ *
+ * Returns a pseudo-random number that is in interval [0, ep_ro). Note
+ * that the result depends on PRNG being well distributed in [0, ~0U]
+ * u32 space. Here we use maximally equidistributed combined Tausworthe
+ * generator, that is, random32(). This is useful when requesting a
+ * random index of an array containing ep_ro elements, for example.
+ *
+ * Returns: pseudo-random number in interval [0, ep_ro)
+ */
+static inline u32 prandom_u32_max(u32 ep_ro)
+{
+	return (u32)(((u64) random32() * ep_ro) >> 32);
+}
+
 /*
  * Handle minimum values for seeds
  */
-- 
2.9.3

