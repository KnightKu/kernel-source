From 4a20665f65141f45e4ac68229c654a973aaa1be9 Mon Sep 17 00:00:00 2001
From: Michal Hocko <mhocko@suse.com>
Date: Fri, 7 Aug 2015 17:37:01 +0200
Subject: [PATCH] mm: make page pfmemalloc check more robust
Patch-mainline: 2f064f3485cd29633ad1b3cfb00cc519509a3d72
References: bnc#920016
Git-commit: 4.2-rc8

The patch c48a11c7ad26 ("netvm: propagate page->pfmemalloc to skb")
added the checks for page->pfmemalloc to __skb_fill_page_desc():

        if (page->pfmemalloc && !page->mapping)
                skb->pfmemalloc = true;

It assumes page->mapping == NULL implies that page->pfmemalloc can be
trusted.  However, __delete_from_page_cache() can set set page->mapping
to NULL and leave page->index value alone. Due to being in union, a
non-zero page->index will be interpreted as true page->pfmemalloc.

So the assumption is invalid if the networking code can see such a
page. And it seems it can. We have encountered this with a NFS over
loopback setup when such a page is attached to a new skbuf. There is no
copying going on in this case so the page confuses __skb_fill_page_desc
which interprets the index as pfmemalloc flag and the network stack
drops packets that have been allocated using the reserves unless they
are to be queued on sockets handling the swapping which is not the case
here and that leads to hangs when the nfs client waits for a response
from the server which has been dropped and thus never arrive.

The struct page is already heavily packed so rather than finding
another hole to put it in, let's do a trick instead. We can reuse the
index again but define it to an impossible value (-1UL). This is the
page index so it should never see the value that large. Replace all
direct users of page->pfmemalloc by page_is_pfmemalloc which will
hide this nastiness from unspoiled eyes.

The information will get lost if somebody wants to use page->index
obviously but that was the case before and the original code expected
that the information should be persisted somewhere else if that is
really needed (e.g. what SLAB and SLUB do).

Fixes: c48a11c7ad26 ("netvm: propagate page->pfmemalloc to skb")
Cc: stable # 3.6+
Debugged-by: Vlastimil Babka <vbabka@suse.com>
Debugged-by: Jiri Bohac <jbohac@suse.com>
Signed-off-by: Michal Hocko <mhocko@suse.com>
Acked-by: Mel Gorman <mgorman@suse.de>

---
 include/linux/mm.h       |   28 ++++++++++++++++++++++++++++
 include/linux/mm_types.h |    9 ---------
 include/linux/skbuff.h   |    4 ++--
 mm/page_alloc.c          |    7 +++++--
 mm/slab.c                |    4 ++--
 mm/slub.c                |    2 +-
 net/core/skbuff.c        |   12 ++++--------
 7 files changed, 42 insertions(+), 24 deletions(-)

--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -854,6 +854,34 @@ static inline int page_mapped(struct pag
 }
 
 /*
+ * Return true only if the page has been allocated with
+ * ALLOC_NO_WATERMARKS and the low watermark was not
+ * met implying that the system is under some pressure.
+ */
+static inline bool page_is_pfmemalloc(struct page *page)
+{
+	/*
+	 * Page index cannot be this large so this must be
+	 * a pfmemalloc page.
+	 */
+	return page->index == -1UL;
+}
+
+/*
+ * Only to be called by the page allocator on a freshly allocated
+ * page.
+ */
+static inline void set_page_pfmemalloc(struct page *page)
+{
+	page->index = -1UL;
+}
+
+static inline void clear_page_pfmemalloc(struct page *page)
+{
+	page->index = 0;
+}
+
+/*
  * Different kinds of faults, as returned by handle_mm_fault().
  * Used to decide whether a process gets delivered SIGBUS or
  * just gets major/minor fault counters bumped up.
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -85,15 +85,6 @@ struct page {
 	union {
 		pgoff_t index;		/* Our offset within mapping. */
 		void *freelist;		/* SLUB: freelist req. slab lock */
-		bool pfmemalloc;	/* If set by the page allocator,
-					 * ALLOC_NO_WATERMARKS was set
-					 * and the low watermark was not
-					 * met implying that the system
-					 * is under some pressure. The
-					 * caller should try ensure
-					 * this page is only used to
-					 * free other pages.
-					 */
 	};
 	struct list_head lru;		/* Pageout list, eg. active_list
 					 * protected by zone->lru_lock !
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -1758,7 +1758,7 @@ static inline struct page *__netdev_allo
 		gfp_mask |= __GFP_MEMALLOC;
 
 	page = alloc_pages_node(NUMA_NO_NODE, gfp_mask, order);
-	if (skb && page && page->pfmemalloc)
+	if (skb && page && page_is_pfmemalloc(page))
 		skb->pfmemalloc = true;
 
 	return page;
@@ -1801,7 +1801,7 @@ static inline struct page *netdev_alloc_
 static inline void propagate_pfmemalloc_skb(struct page *page,
 						struct sk_buff *skb)
 {
-	if (page && page->pfmemalloc)
+	if (page && page_is_pfmemalloc(page))
 		skb->pfmemalloc = true;
 }
 
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -1820,13 +1820,16 @@ this_zone_full:
 
 	if (page)
 		/*
-		 * page->pfmemalloc is set when ALLOC_NO_WATERMARKS was
+		 * page is set pfmemalloc is when ALLOC_NO_WATERMARKS was
 		 * necessary to allocate the page. The expectation is
 		 * that the caller is taking steps that will free more
 		 * memory. The caller should avoid the page being used
 		 * for !PFMEMALLOC purposes.
 		 */
-		page->pfmemalloc = !!(alloc_flags & ALLOC_NO_WATERMARKS);
+		if (alloc_flags & ALLOC_NO_WATERMARKS)
+			set_page_pfmemalloc(page);
+		else
+			clear_page_pfmemalloc(page);
 
 	return page;
 }
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -1850,7 +1850,7 @@ static void *kmem_getpages(struct kmem_c
 		return NULL;
 
 	/* Record if ALLOC_NO_WATERMARKS was set when allocating the slab */
-	if (unlikely(page->pfmemalloc))
+	if (page_is_pfmemalloc(page))
 		pfmemalloc_active = true;
 
 	nr_pages = (1 << cachep->gfporder);
@@ -1863,7 +1863,7 @@ static void *kmem_getpages(struct kmem_c
 	for (i = 0; i < nr_pages; i++) {
 		__SetPageSlab(page + i);
 
-		if (page->pfmemalloc)
+		if (page_is_pfmemalloc(page))
 			SetPageSlabPfmemalloc(page + i);
 	}
 
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1261,7 +1261,7 @@ static struct page *new_slab(struct kmem
 	inc_slabs_node(s, page_to_nid(page), page->objects);
 	page->slab = s;
 	page->flags |= 1 << PG_slab;
-	if (page->pfmemalloc)
+	if (page_is_pfmemalloc(page))
 		SetPageSlabPfmemalloc(page);
 
 	start = page_address(page);
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -2515,15 +2515,11 @@ int skb_append_datato_frags(struct sock
 		copy = (length > left)? left : length;
 
 		/* 
-		 * Propagate page->pfmemalloc to the skb if we can. The problem is
-		 * that not all callers have unique ownership of the page. If
-		 * pfmemalloc is set, we check the mapping as a mapping implies
-		 * page->index is set (index and pfmemalloc share space).
-		 * If it's a valid mapping, we cannot use page->pfmemalloc but we
-		 * do not lose pfmemalloc information as the pages would not be
-		 * allocated using __GFP_MEMALLOC.
+		 * Propagate page pfmemalloc to the skb if we can. The problem is
+		 * that not all callers have unique ownership of the page but rely
+		 * on page_is_pfmemalloc doing the right thing(tm).
 		 */
-		if (frag->page->pfmemalloc && !frag->page->mapping)
+		if (page_is_pfmemalloc(frag->page))
 			skb->pfmemalloc = true;
 
 		ret = getfrag(from, (page_address(frag->page) +
