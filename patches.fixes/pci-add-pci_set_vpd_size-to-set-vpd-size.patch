From: Hariprasad Shenai <hariprasad@chelsio.com>
Date: Fri, 15 Apr 2016 13:00:11 -0500
Subject: PCI: Add pci_set_vpd_size() to set VPD size
Git-commit: cb92148b58a49455f3a7204eba3aee09a8b7683c
Patch-mainline: v4.6
References: bsc#976867

After 104daa71b396 ("PCI: Determine actual VPD size on first access"), the
PCI core computes the valid VPD size by parsing the VPD starting at offset
0x0.  We don't attempt to read past that valid size because that causes
some devices to crash.

However, some devices do have data past that valid size.  For example,
Chelsio adapters contain two VPD structures, and the driver needs both of
them.

Add pci_set_vpd_size().  If a driver knows it is safe to read past the end
of the VPD data structure at offset 0, it can use pci_set_vpd_size() to
allow access to as much data as it needs.

[bhelgaas: changelog, split patches, rename to pci_set_vpd_size() and
return int (not ssize_t)]
Fixes: 104daa71b396 ("PCI: Determine actual VPD size on first access")
Tested-by: Steve Wise <swise@opengridcomputing.com>
Signed-off-by: Casey Leedom <leedom@chelsio.com>
Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Backporting notes: the code had to be adjusted because we still have
struct pci_vpd_pci22 while upstream got rid of it.

Acked-by: Jean Delvare <jdelvare@suse.de>
---
 drivers/pci/access.c |   43 +++++++++++++++++++++++++++++++++++++++++++
 drivers/pci/pci.h    |    3 +++
 include/linux/pci.h  |    1 +
 3 files changed, 47 insertions(+)

--- a/drivers/pci/access.c
+++ b/drivers/pci/access.c
@@ -119,6 +119,19 @@ ssize_t pci_write_vpd(struct pci_dev *de
 }
 EXPORT_SYMBOL(pci_write_vpd);
 
+/**
+ * pci_set_vpd_size - Set size of Vital Product Data space
+ * @dev:	pci device struct
+ * @len:	size of vpd space
+ */
+int pci_set_vpd_size(struct pci_dev *dev, size_t len)
+{
+	if (!dev->vpd || !dev->vpd->ops)
+		return -ENODEV;
+	return dev->vpd->ops->set_size(dev, len);
+}
+EXPORT_SYMBOL(pci_set_vpd_size);
+
 /*
  * The following routines are to prevent the user from accessing PCI config
  * space when it's unsafe to do so.  Some devices require this during BIST and
@@ -426,6 +439,20 @@ out:
 	return ret ? ret : count;
 }
 
+static int pci_vpd_pci22_set_size(struct pci_dev *dev, size_t len)
+{
+	struct pci_vpd_pci22 *vpd;
+
+	if (len == 0 || len > PCI_VPD_PCI22_SIZE)
+		return -EIO;
+
+	vpd = container_of(dev->vpd, struct pci_vpd_pci22, base);
+	vpd->valid = 1;
+	vpd->base.len = len;
+
+	return 0;
+}
+
 static void pci_vpd_pci22_release(struct pci_dev *dev)
 {
 	kfree(container_of(dev->vpd, struct pci_vpd_pci22, base));
@@ -434,6 +461,7 @@ static void pci_vpd_pci22_release(struct
 static const struct pci_vpd_ops pci_vpd_pci22_ops = {
 	.read = pci_vpd_pci22_read,
 	.write = pci_vpd_pci22_write,
+	.set_size = pci_vpd_pci22_set_size,
 	.release = pci_vpd_pci22_release,
 };
 
@@ -465,9 +493,24 @@ static ssize_t pci_vpd_f0_write(struct p
 	return ret;
 }
 
+static int pci_vpd_f0_set_size(struct pci_dev *dev, size_t len)
+{
+	struct pci_dev *tdev = pci_get_slot(dev->bus,
+					    PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
+	int ret;
+
+	if (!tdev)
+		return -ENODEV;
+
+	ret = pci_set_vpd_size(tdev, len);
+	pci_dev_put(tdev);
+	return ret;
+}
+
 static const struct pci_vpd_ops pci_vpd_f0_ops = {
 	.read = pci_vpd_f0_read,
 	.write = pci_vpd_f0_write,
+	.set_size = pci_vpd_f0_set_size,
 	.release = pci_vpd_pci22_release,
 };
 
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -97,6 +97,9 @@ struct pci_vpd_ops {
 	ssize_t (*read)(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
 	ssize_t (*write)(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);
 	void (*release)(struct pci_dev *dev);
+#ifndef __GENKSYMS__
+	int (*set_size)(struct pci_dev *dev, size_t len);
+#endif
 };
 
 struct pci_vpd {
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -924,6 +924,7 @@ unsigned int pci_rescan_bus(struct pci_b
 /* Vital product data routines */
 ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
 ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);
+int pci_set_vpd_size(struct pci_dev *dev, size_t len);
 int pci_vpd_truncate(struct pci_dev *dev, size_t size);
 
 /* Helper functions for low-level code (drivers/pci/setup-[bus,res].c) */
