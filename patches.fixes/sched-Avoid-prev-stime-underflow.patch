From: Stanislaw Gruszka <sgruszka@redhat.com>
Date: Tue, 30 Apr 2013 11:35:06 +0200
Subject: sched: Avoid prev->stime underflow
Git-commit: 68aa8efcd1ab961e4684ef5af32f72a6ec1911de
Patch-mainline: v3.10-rc1
References: bnc#938352

Dave Hansen reported strange utime/stime values on his system:
https://lkml.org/lkml/2013/4/4/435

This happens because prev->stime value is bigger than rtime
value. Root of the problem are non-monotonic rtime values (i.e.
current rtime is smaller than previous rtime) and that should be
debugged and fixed.

But since problem did not manifest itself before commit
62188451f0d63add7ad0cd2a1ae269d600c1663d "cputime: Avoid
multiplication overflow on utime scaling", it should be threated
as regression, which we can easily fixed on cputime_adjust()
function.

For now, let's apply this fix, but further work is needed to fix
root of the problem.

Reported-and-tested-by: Dave Hansen <dave@sr71.net>
Cc: <stable@vger.kernel.org> # 3.9+
Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
Cc: rostedt@goodmis.org
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Dave Hansen <dave@sr71.net>
Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1367314507-9728-3-git-send-email-sgruszka@redhat.com
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Mike Galbraith <mgalbraith@suse.de>
---
 kernel/sched.c |   29 ++++++++++++++---------------
 1 file changed, 14 insertions(+), 15 deletions(-)

--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -4308,7 +4308,7 @@ static cputime_t scale_stime(u64 stime,
 
 void task_times(struct task_struct *p, cputime_t *ut, cputime_t *st)
 {
-	cputime_t rtime, stime = p->stime, total = cputime_add(stime, p->utime);
+	cputime_t rtime, stime = p->stime, utime, total = cputime_add(stime, p->utime);
 
 	/*
 	 * Use CFS's precise accounting:
@@ -4323,19 +4323,19 @@ void task_times(struct task_struct *p, c
 	if (cputime_add(p->prev_stime, p->prev_utime) >= rtime)
 		goto out;
 
-	if (!rtime) {
-		stime = 0;
-	} else if (!total) {
-		stime = rtime;
-	} else {
+	if (total) {
 		stime = scale_stime(stime, rtime, total);
+		utime = cputime_sub(rtime, stime);
+	} else {
+		stime = rtime;
+		utime = 0;
 	}
 
 	/*
 	 * Compare with previous values, to keep monotonicity:
 	 */
 	p->prev_stime = max(p->prev_stime, stime);
-	p->prev_utime = max(p->prev_utime, cputime_sub(rtime, p->prev_stime));
+	p->prev_utime = max(p->prev_utime, utime);
 
 out:
 	*ut = p->prev_utime;
@@ -4349,7 +4349,7 @@ void thread_group_times(struct task_stru
 {
 	struct signal_struct *sig = p->signal;
 	struct task_cputime cputime;
-	cputime_t rtime, stime, total;
+	cputime_t rtime, stime, utime, total;
 
 	thread_group_cputime(p, &cputime);
 
@@ -4364,17 +4364,16 @@ void thread_group_times(struct task_stru
 	if (cputime_add(sig->prev_stime, sig->prev_utime) >= rtime)
 		goto out;
 
-	if (!rtime) {
-		stime = 0;
-	} else if (!total) {
-		stime = rtime;
-	} else {
+	if (total) {
 		stime = scale_stime(cputime.stime, rtime, total);
+		utime = cputime_sub(rtime, stime);
+	} else {
+		stime = rtime;
+		utime = 0;
 	}
 
 	sig->prev_stime = max(sig->prev_stime, stime);
-	sig->prev_utime = max(sig->prev_utime,
-			      cputime_sub(rtime, sig->prev_stime));
+	sig->prev_utime = max(sig->prev_utime, utime);
 
 out:
 	*ut = sig->prev_utime;
