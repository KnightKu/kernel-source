From: Jan Kara <jack@suse.cz>
Subject: jbd: Fix unreclaimed pages after truncate in data=journal mode
Patch-mainline: 4.4-rc5
Git-commit: bc23f0c8d7ccd8d924c4e70ce311288cb3e61ea8
References: bsc#961516

Ted and Namjae have reported that truncated pages don't get timely
reclaimed after being truncated in data=journal mode. The following test
triggers the issue easily:

for (i = 0; i < 1000; i++) {
    pwrite(fd, buf, 1024*1024, 0);
    fsync(fd);
    fsync(fd);
    ftruncate(fd, 0);
}

The reason is that journal_unmap_buffer() finds that truncated buffers
are not journalled (jh->b_transaction == NULL), they are part of
checkpoint list of a transaction (jh->b_cp_transaction != NULL) and have
been already written out (!buffer_dirty(bh)). We clean such buffers but
we leave them in the checkpoint list. Since checkpoint transaction holds
a reference to the journal head, these buffers cannot be released until
the checkpoint transaction is cleaned up. And at that point we don't
call release_buffer_page() anymore so pages detached from mapping are
lingering in the system waiting for reclaim to find them and free them.

Fix the problem by removing buffers from transaction checkpoint lists
when journal_unmap_buffer() finds out they don't have to be there
anymore.

Reported-and-tested-by: Namjae Jeon <namjae.jeon@samsung.com>
Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>

---
 fs/jbd/transaction.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/fs/jbd/transaction.c
+++ b/fs/jbd/transaction.c
@@ -1898,6 +1898,7 @@ retry:
 
 		if (!buffer_dirty(bh)) {
 			/* bdflush has written it.  We can drop it now */
+			__journal_remove_checkpoint(jh);
 			goto zap_buffer;
 		}
 
@@ -1927,6 +1928,7 @@ retry:
 				/* The orphan record's transaction has
 				 * committed.  We can cleanse this buffer */
 				clear_buffer_jbddirty(bh);
+				__journal_remove_checkpoint(jh);
 				goto zap_buffer;
 			}
 		}
