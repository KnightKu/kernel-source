From: =?UTF-8?q?Michal=20Kube=C4=8Dek?= <mkubecek@suse.cz>
Date: Fri, 2 Dec 2016 09:33:41 +0100
Subject: tipc: check minimum bearer MTU
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Patch-mainline: v4.9-rc8
Git-commit: 3de81b758853f0b29c61e246679d20b513c4cfec
References: CVE-2016-8632 bsc#1008831

Qian Zhang (张谦) reported a potential socket buffer overflow in
tipc_msg_build() which is also known as CVE-2016-8632: due to
insufficient checks, a buffer overflow can occur if MTU is too short for
even tipc headers. As anyone can set device MTU in a user/net namespace,
this issue can be abused by a regular user.

As agreed in the discussion on Ben Hutchings' original patch, we should
check the MTU at the moment a bearer is attached rather than for each
processed packet. We also need to repeat the check when bearer MTU is
adjusted to new device MTU. UDP case also needs a check to avoid
overflow when calculating bearer MTU.

Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
Acked-by: Michal Kubecek <mkubecek@suse.cz>
Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
Acked-by: Ying Xue <ying.xue@windriver.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

SLE11-SP[2-4]: no udp media, no ib media, code rearranged

---
 net/tipc/bearer.h    | 12 ++++++++++++
 net/tipc/eth_media.c | 15 ++++++++++++---
 2 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/net/tipc/bearer.h b/net/tipc/bearer.h
index 3cd42a806ed0..d215c2c0b388 100644
--- a/net/tipc/bearer.h
+++ b/net/tipc/bearer.h
@@ -72,6 +72,9 @@ struct tipc_media_addr {
 
 struct tipc_bearer;
 
+/* minimum bearer MTU */
+#define TIPC_MIN_BEARER_MTU	100	/* MAX_H_SIZE + INT_H_SIZE */
+
 /**
  * struct tipc_media - TIPC media information available to internal users
  * @send_msg: routine which handles buffer transmission
@@ -206,4 +209,13 @@ static inline void tipc_bearer_send(struct tipc_bearer *b, struct sk_buff *buf,
 	b->media->send_msg(buf, b, dest);
 }
 
+/* check if device MTU is too low for a TIPC bearer */
+static inline bool tipc_mtu_bad(struct net_device *dev, unsigned int reserve)
+{
+	if (dev->mtu >= TIPC_MIN_BEARER_MTU + reserve)
+		return false;
+	netdev_warn(dev, "MTU too low for tipc bearer\n");
+	return true;
+}
+
 #endif	/* _TIPC_BEARER_H */
diff --git a/net/tipc/eth_media.c b/net/tipc/eth_media.c
index 4bc394916e27..76d17ca5df38 100644
--- a/net/tipc/eth_media.c
+++ b/net/tipc/eth_media.c
@@ -188,6 +188,10 @@ static int enable_bearer(struct tipc_bearer *tb_ptr)
 	read_unlock(&dev_base_lock);
 	if (!dev)
 		return -ENODEV;
+	if (tipc_mtu_bad(dev, 0)) {
+		dev_put(dev);
+		return -EINVAL;
+	}
 
 	/* Create Ethernet bearer for device */
 	eb_ptr->dev = dev;
@@ -265,17 +269,22 @@ static int recv_notification(struct notifier_block *nb, unsigned long evt,
 	if (!eb_ptr->bearer)
 		return NOTIFY_DONE;		/* bearer had been disabled */
 
-	eb_ptr->bearer->mtu = dev->mtu;
-
 	switch (evt) {
 	case NETDEV_CHANGE:
 		if (netif_carrier_ok(dev))
 			break;
 	case NETDEV_DOWN:
-	case NETDEV_CHANGEMTU:
 	case NETDEV_CHANGEADDR:
 		tipc_reset_bearer(eb_ptr->bearer);
 		break;
+	case NETDEV_CHANGEMTU:
+		if (tipc_mtu_bad(dev, 0)) {
+			tipc_disable_bearer(eb_ptr->bearer->name);
+			break;
+		}
+		eb_ptr->bearer->mtu = dev->mtu;
+		tipc_reset_bearer(eb_ptr->bearer);
+		break;
 	case NETDEV_UNREGISTER:
 	case NETDEV_CHANGENAME:
 		tipc_disable_bearer(eb_ptr->bearer->name);
-- 
2.11.0

