From 9417ef87e7d616a6ead63765b6106528fdd06622 Mon Sep 17 00:00:00 2001
From: Wang Shilong <wangsl-fnst@cn.fujitsu.com>
Date: Sat, 12 Jan 2013 01:36:17 -0800
References: bnc#1069508
Subject: [PATCH 4/6] Ext3: use unlikely to improve the efficiency of the
 kernel
Patch-mainline: v3.8
Git-commit: 1b7d76e9b1106f2be062f915b05d47658dd4fc63

Because the function 'sb_getblk' seldomly fails to return
NULL value,it will be better to use unlikely to check it.

Signed-off-by: Wang Shilong <wangsl-fnst@cn.fujitsu.com>
Signed-off-by: Jan Kara <jack@suse.cz>
---
 fs/ext3/inode.c  | 6 +++---
 fs/ext3/resize.c | 6 +++---
 fs/ext3/xattr.c  | 2 +-
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/fs/ext3/inode.c b/fs/ext3/inode.c
index b205898..a012f26 100644
--- a/fs/ext3/inode.c
+++ b/fs/ext3/inode.c
@@ -1094,7 +1094,7 @@ struct buffer_head *ext3_getblk(handle_t *handle, struct inode *inode,
 	if (!err && buffer_mapped(&dummy)) {
 		struct buffer_head *bh;
 		bh = sb_getblk(inode->i_sb, dummy.b_blocknr);
-		if (!bh) {
+		if (unlikely(!bh)) {
 			*errp = -EIO;
 			goto err;
 		}
@@ -2724,7 +2724,7 @@ static int __ext3_get_inode_loc(struct inode *inode,
 		return -EIO;
 
 	bh = sb_getblk(inode->i_sb, block);
-	if (!bh) {
+	if (unlikely(!bh)) {
 		ext3_error (inode->i_sb, "ext3_get_inode_loc",
 				"unable to read inode block - "
 				"inode=%lu, block="E3FSBLK,
@@ -2778,7 +2778,7 @@ static int __ext3_get_inode_loc(struct inode *inode,
 
 			bitmap_bh = sb_getblk(inode->i_sb,
 					le32_to_cpu(desc->bg_inode_bitmap));
-			if (!bitmap_bh)
+			if (unlikely(!bitmap_bh))
 				goto make_io;
 
 			/*
diff --git a/fs/ext3/resize.c b/fs/ext3/resize.c
index 7916e4ce..8f35486 100644
--- a/fs/ext3/resize.c
+++ b/fs/ext3/resize.c
@@ -119,7 +119,7 @@ static struct buffer_head *bclean(handle_t *handle, struct super_block *sb,
 	int err;
 
 	bh = sb_getblk(sb, blk);
-	if (!bh)
+	if (unlikely(!bh))
 		return ERR_PTR(-EIO);
 	if ((err = ext3_journal_get_write_access(handle, bh))) {
 		brelse(bh);
@@ -237,7 +237,7 @@ static int setup_new_group_blocks(struct super_block *sb,
 			goto exit_bh;
 
 		gdb = sb_getblk(sb, block);
-		if (!gdb) {
+		if (unlikely(!gdb)) {
 			err = -EIO;
 			goto exit_bh;
 		}
@@ -725,7 +725,7 @@ static void update_backups(struct super_block *sb,
 			break;
 
 		bh = sb_getblk(sb, group * bpg + blk_off);
-		if (!bh) {
+		if (unlikely(!bh)) {
 			err = -EIO;
 			break;
 		}
diff --git a/fs/ext3/xattr.c b/fs/ext3/xattr.c
index 2cf42d6..3f1a177 100644
--- a/fs/ext3/xattr.c
+++ b/fs/ext3/xattr.c
@@ -827,7 +827,7 @@ inserted:
 			ea_idebug(inode, "creating block %d", block);
 
 			new_bh = sb_getblk(sb, block);
-			if (!new_bh) {
+			if (unlikely(!new_bh)) {
 getblk_failed:
 				ext3_free_blocks(handle, inode, block, 1);
 				error = -EIO;
-- 
1.7.12.4

