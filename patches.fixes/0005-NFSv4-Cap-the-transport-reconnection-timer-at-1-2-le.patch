From: Trond Myklebust <trond.myklebust@primarydata.com>
Date: Fri, 5 Aug 2016 19:03:31 -0400
Subject: [PATCH] NFSv4: Cap the transport reconnection timer at 1/2 lease
 period
Git-commit: 8d480326c3d6921ff5f1cc988c993bd572248deb
Patch-mainline: v4.8
References: bsc#1014410

We don't want to miss a lease period renewal due to the TCP connection
failing to reconnect in a timely fashion. To ensure this doesn't happen,
cap the reconnection timer so that we retry the connection attempt
at least every 1/2 lease period.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Acked-by: NeilBrown <neilb@suse.com>

---
 fs/nfs/nfs4renewd.c         |    3 +++
 include/linux/sunrpc/clnt.h |    2 ++
 net/sunrpc/clnt.c           |   19 +++++++++++++++++++
 3 files changed, 24 insertions(+)

--- a/fs/nfs/nfs4renewd.c
+++ b/fs/nfs/nfs4renewd.c
@@ -159,6 +159,9 @@ void nfs4_set_lease_period(struct nfs_cl
 	clp->cl_lease_time = lease;
 	clp->cl_last_renewal = lastrenewed;
 	spin_unlock(&clp->cl_lock);
+
+	/* Cap maximum reconnect timeout at 1/2 lease period */
+	rpc_cap_max_reconnect_timeout(clp->cl_rpcclient, lease >> 1);
 }
 
 /*
--- a/include/linux/sunrpc/clnt.h
+++ b/include/linux/sunrpc/clnt.h
@@ -164,6 +164,8 @@ size_t		rpc_pton(const char *, const siz
 char *		rpc_sockaddr2uaddr(const struct sockaddr *);
 size_t		rpc_uaddr2sockaddr(const char *, const size_t,
 				   struct sockaddr *, const size_t);
+void		rpc_cap_max_reconnect_timeout(struct rpc_clnt *clnt,
+			unsigned long timeo);
 
 static inline unsigned short rpc_get_port(const struct sockaddr *sap)
 {
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@ -1843,6 +1843,25 @@ struct rpc_task *rpc_call_null(struct rp
 }
 EXPORT_SYMBOL_GPL(rpc_call_null);
 
+static int
+rpc_xprt_cap_max_reconnect_timeout(struct rpc_clnt *clnt,
+		struct rpc_xprt *xprt,
+		void *data)
+{
+	unsigned long timeout = *((unsigned long *)data);
+
+	if (timeout < xprt->max_reconnect_timeout)
+		xprt->max_reconnect_timeout = timeout;
+	return 0;
+}
+
+void
+rpc_cap_max_reconnect_timeout(struct rpc_clnt *clnt, unsigned long timeo)
+{
+	rpc_xprt_cap_max_reconnect_timeout(clnt, clnt->cl_xprt, &timeo);
+}
+EXPORT_SYMBOL_GPL(rpc_cap_max_reconnect_timeout);
+
 #ifdef RPC_DEBUG
 static void rpc_show_header(void)
 {
