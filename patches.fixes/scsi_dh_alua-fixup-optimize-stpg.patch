From 4e6236ec08d2a84c8118519c73f129873f53ae17 Mon Sep 17 00:00:00 2001
From: Shiva Krishna Merla <shivakrishna.merla@netapp.com>
Date: Mon, 30 Jun 2014 08:28:18 +0200
Subject: scsi_dh_alua: optimize_stpg functionality broken
References: bnc#877514
Patch-Mainline: submitted to linux-scsi

scsi_dh_alua has an optimize_stpg module parameter which provides
functionality to avoid host issuing stpg command in case of failover
to non-preferred non-optimized path when implicit failover is
supported. With the recent changes to scsi_dh_alua handler, flags are
not updated in the alua_port_group object to consider
ALUA_OPTIMIZE_STPG flag. This happens both while passing optimize_stpg
as module parameter or "2 alua 1" through multipath.conf as hardware handler
parameters.

Signed-off-by: Shiva Krishna Merla <shivakrishna.merla@netapp.com>
Acked-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/device_handler/scsi_dh_alua.c | 28 +++++++++++++++++++++-------
 1 file changed, 21 insertions(+), 7 deletions(-)

diff --git a/drivers/scsi/device_handler/scsi_dh_alua.c b/drivers/scsi/device_handler/scsi_dh_alua.c
index bb6e96c..98f6060 100644
--- a/drivers/scsi/device_handler/scsi_dh_alua.c
+++ b/drivers/scsi/device_handler/scsi_dh_alua.c
@@ -105,7 +105,6 @@ struct alua_dh_data {
 	int			rel_port;
 	int			tpgs;
 	int			error;
-	unsigned		flags; /* used for optimizing STPG */
 	struct completion       init_complete;
 };
 
@@ -543,7 +542,6 @@ static int alua_check_vpd(struct scsi_device *sdev, struct alua_dh_data *h)
 	pg->bufflen = ALUA_INQUIRY_SIZE;
 	pg->tpgs = h->tpgs;
 	pg->state = TPGS_STATE_OPTIMIZED;
-	pg->flags = h->flags;
 	kref_init(&pg->kref);
 	INIT_DELAYED_WORK(&pg->rtpg_work, alua_rtpg_work);
 	INIT_LIST_HEAD(&pg->rtpg_list);
@@ -990,9 +988,11 @@ static int alua_initialize(struct scsi_device *sdev, struct alua_dh_data *h)
 static int alua_set_params(struct scsi_device *sdev, const char *params)
 {
 	struct alua_dh_data *h = get_alua_data(sdev);
+	struct alua_port_group *pg = NULL;
 	unsigned int optimize = 0, argc;
 	const char *p = params;
 	int result = SCSI_DH_OK;
+	unsigned long flags;
 
 	if (!h)
 		return -ENXIO;
@@ -1005,11 +1005,21 @@ static int alua_set_params(struct scsi_device *sdev, const char *params)
 	if ((sscanf(p, "%u", &optimize) != 1) || (optimize > 1))
 		return -EINVAL;
 
+	rcu_read_lock();
+	pg = rcu_dereference(h->pg);
+	if (!pg) {
+		rcu_read_unlock();
+		return -ENXIO;
+	}
+	rcu_read_unlock();
+
+	spin_lock_irqsave(&pg->rtpg_lock, flags);
 	if (optimize)
-		h->flags |= ALUA_OPTIMIZE_STPG;
+		pg->flags |= ALUA_OPTIMIZE_STPG;
 	else
-		h->flags &= ~ALUA_OPTIMIZE_STPG;
+		pg->flags &= ~ALUA_OPTIMIZE_STPG;
 
+	spin_unlock_irqrestore(&pg->rtpg_lock, flags);
 	return result;
 }
 
@@ -1033,6 +1043,7 @@ static int alua_activate(struct scsi_device *sdev,
 	struct alua_dh_data *h = get_alua_data(sdev);
 	struct alua_queue_data *qdata;
 	struct alua_port_group *pg;
+	unsigned long flags;
 
 	if (!h) {
 		if (fn)
@@ -1040,9 +1051,6 @@ static int alua_activate(struct scsi_device *sdev,
 		return 0;
 	}
 
-	if (optimize_stpg)
-		h->flags |= ALUA_OPTIMIZE_STPG;
-
 	qdata = kzalloc(sizeof(*qdata), GFP_KERNEL);
 	if (!qdata) {
 		if (fn)
@@ -1071,6 +1079,12 @@ static int alua_activate(struct scsi_device *sdev,
 	kref_get(&pg->kref);
 	rcu_read_unlock();
 
+	if (optimize_stpg) {
+		spin_lock_irqsave(&pg->rtpg_lock, flags);
+		pg->flags |= ALUA_OPTIMIZE_STPG;
+		spin_unlock_irqrestore(&pg->rtpg_lock, flags);
+	}
+
 	alua_rtpg_queue(pg, sdev, qdata);
 	kref_put(&pg->kref, release_port_group);
 	return 0;
-- 
1.7.12.4

