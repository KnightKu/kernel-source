Subject: sched: update_rq_clock() must skip ONE update
From: Mike Galbraith <mgalbraith@suse.de>
Date: Sun Mar 30 06:56:48 CEST 2014
Patch-mainline: no, mainline will be fixed differently
References: bnc#868528, bnc#869033

Staying in-kernel for weeks at a time during boot can lead to clock
updates being skipped for long enough that the watchdog is credited
with enough delta_exec to not only trigger the rt throttle, but also
then be incapacitated by the throttle for long enough that the hard
lockup detector triggers.  Disk discovery did this in the field, the
trace below shows the anatomy of a smallish version of the bug from
my little desktop box, modprobe being the instigator.

  modprobe-134   [000]     5.027903: update_rq_clock <-scheduler_tick
  modprobe-134   [000]     5.037857: update_rq_clock <-scheduler_tick
  modprobe-134   [000]     5.037864: update_rq_clock <-enqueue_task
  modprobe-134   [000]     5.037866: enqueue_task_watchdog: WATCHDOG/0 enqueue 4915630446
  modprobe-134   [000]     5.044965: update_rq_clock <-scheduler_tick
  modprobe-134   [000]     5.046275: update_rq_clock <-scheduler_tick
  modprobe-134   [000]     5.050274: update_rq_clock <-scheduler_tick
  modprobe-134   [000]     5.052862: update_rq_clock <-dequeue_task
  modprobe-134   [000]     5.052866: pick_next_task_watchdog: WATCHDOG/0 select 4915630446
watchdog/0-7     [000]     5.052868: finish_task_switch: WATCHDOG/0 runs 5052867644
watchdog/0-7     [000]     5.052869: watchdog: WATCHDOG/0 DELAYED 137238048 max: 137238048
watchdog/0-7     [000]     5.052872: update_rq_clock <-dequeue_task
watchdog/0-7     [000]     5.052873: dequeue_task_watchdog: WATCHDOG/0 dequeue 5052872018
watchdog/0-7     [000]     5.052874: put_prev_task_watchdog: WATCHDOG/0 STOP trace : delta_exec 137241572 sum_exec 137254287

Note: peterz will be committing a much more invasive patch for mainline.
This fix gets the job done, and in the simplest possible fashion.

Signed-off-by: Mike Galbraith <mgalbraith@suse.de>
---
 kernel/sched/core.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -118,7 +118,7 @@ void update_rq_clock(struct rq *rq)
 {
 	s64 delta;
 
-	if (rq->skip_clock_update > 0)
+	if (rq->skip_clock_update-- > 0)
 		return;
 
 	delta = sched_clock_cpu(cpu_of(rq)) - rq->clock;
