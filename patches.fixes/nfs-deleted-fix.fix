From: NeilBrown <neilb@suse.com>
Subject: NFS: Do drop directory dentry when error clearly requires it.
References: bsc#1051932
Patch-mainline: Never, code significantly changed

patches-fixes/nfs-deleted-fix changed code so we didn't drop a dentry
due to EIO unless it was safe.   Unfortunately it also meant that we
didn't drop a dentry to do real errors, like ENOENT, or finding an inode
which wasn't the one we expected.
If the dentry isn't dropped, we get ESTALE instead of the correct inode.

So test for errors which indicate a genuine problem with the named object,
and don't drop for errors which indicate a problem with the parent directory
or the RPC.

Signed-off-by: NeilBrown <neilb@suse.com>
Acked-by: NeilBrown <neilb@suse.com>

---
 fs/nfs/dir.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -1146,7 +1146,7 @@ static int nfs_lookup_revalidate(struct
 	struct dentry *parent;
 	struct nfs_fh *fhandle = NULL;
 	struct nfs_fattr *fattr = NULL;
-	int error;
+	int error = 0;
 
 	if (nd && (nd->flags & LOOKUP_UMOUNT))
 		/* on unmount, assume all dentries are correct */
@@ -1274,7 +1274,7 @@ out_zap_parent:
 		if (IS_ROOT(dentry))
 			goto out_valid;
 		shrink_dcache_parent(dentry);
-		if (dentry->d_lockref.count > 1)
+		if (error && error != -ENOENT && dentry->d_lockref.count > 1)
 			/* possibly mounted, too dangerous to drop */
 			goto out_valid;
 	}
