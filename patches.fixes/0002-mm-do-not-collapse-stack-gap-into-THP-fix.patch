From: Michal Hocko <mhocko@suse.com>
Subject: [PATCH] mm: do not collapse stack gap into THP
Patch-mainline: no, fixup for patches.fixes/0002-mm-do-not-collapse-stack-gap-into-THP.patch
References: bnc#1039348, CVE-2017-1000364

Willy Tarreau has noticed that my backport
(patches.fixes/0002-mm-do-not-collapse-stack-gap-into-THP.patch) is not
accounting THP_FAULT_FALLBACK properly. This is not a disaster because the
counter is only exported to the userspace and nothing really crucial depends on
it. It is good to fix though. Also we can move stack_guard_area check up
because there is no real need to even try anon_vma_prepare resp.
khugepaged_enter on the gap area.

Signed-off-by: Michal Hocko <mhocko@suse.com>

---
 mm/huge_memory.c |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -679,13 +679,15 @@ int do_huge_pmd_anonymous_page(struct mm
 	pte_t *pte;
 
 	if (haddr >= vma->vm_start && haddr + HPAGE_PMD_SIZE <= vma->vm_end) {
+		if (stack_guard_area(vma, haddr) ||
+				stack_guard_area(vma, haddr + HPAGE_PMD_SIZE)) {
+			count_vm_event(THP_FAULT_FALLBACK);
+			goto out;
+		}
 		if (unlikely(anon_vma_prepare(vma)))
 			return VM_FAULT_OOM;
 		if (unlikely(khugepaged_enter(vma)))
 			return VM_FAULT_OOM;
-		if (stack_guard_area(vma, haddr) ||
-				stack_guard_area(vma, haddr + HPAGE_PMD_SIZE))
-			goto out;
 		page = alloc_hugepage_vma(transparent_hugepage_defrag(vma),
 					  vma, haddr, numa_node_id(), 0);
 		if (unlikely(!page)) {
