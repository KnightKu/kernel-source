From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390: add sysfs attributes for spectre
Patch-mainline: v4.17-rc1
Git-commit: d424986f1d6b16079b3231db0314923f4f8deed1
References: bnc#1089386, LTC#166572

Description:  kernel: expoline defense against the spectre attack
Symptom:      None
Problem:      The spectre attack may be used to read restricted kernel
              data from user space.
Solution:     Provide execute trampolines for indirect branches
Reproduction: None

Upstream-Description:

              s390: add sysfs attributes for spectre

              Set CONFIG_GENERIC_CPU_VULNERABILITIES and provide the two functions
              cpu_show_spectre_v1 and cpu_show_spectre_v2 to report the spectre
              mitigations.

              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 arch/s390/Kconfig                |    1 +
 arch/s390/kernel/nospec-branch.c |   21 +++++++++++++++++++++
 2 files changed, 22 insertions(+)

--- a/arch/s390/Kconfig
+++ b/arch/s390/Kconfig
@@ -120,6 +120,7 @@ config S390
 	select ARCH_INLINE_WRITE_UNLOCK_IRQ
 	select ARCH_INLINE_WRITE_UNLOCK_IRQRESTORE
 	select ARCH_SUPPORTS_ATOMIC_RMW
+	select GENERIC_CPU_VULNERABILITIES
 
 config SCHED_OMIT_FRAME_POINTER
 	def_bool y
--- a/arch/s390/kernel/nospec-branch.c
+++ b/arch/s390/kernel/nospec-branch.c
@@ -1,5 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/module.h>
+#include <linux/device.h>
 #include <linux/uaccess.h>
 #include <asm/nospec-branch.h>
 
@@ -53,6 +54,26 @@ static int __init nospec_report(void)
 }
 arch_initcall(nospec_report);
 
+#ifdef CONFIG_SYSFS
+ssize_t cpu_show_spectre_v1(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Mitigation: __user pointer sanitization\n");
+}
+
+ssize_t cpu_show_spectre_v2(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+#ifdef CC_USING_EXPOLINE
+	if (!nospec_disable)
+		return sprintf(buf, "Mitigation: execute trampolines\n");
+#endif
+	if (__test_facility(82, S390_lowcore.alt_stfle_fac_list))
+		return sprintf(buf, "Mitigation: limited branch prediction.\n");
+	return sprintf(buf, "Vulnerable\n");
+}
+#endif
+
 #ifdef CONFIG_EXPOLINE
 
 #ifdef CONFIG_EXPOLINE_OFF
