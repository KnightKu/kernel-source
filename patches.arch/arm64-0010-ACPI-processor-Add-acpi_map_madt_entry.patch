From: David Daney <david.daney@cavium.com>
Date: Tue, 24 May 2016 15:35:43 -0700
Subject: ACPI / processor: Add acpi_map_madt_entry()
Git-commit: fb7c2bae8a479e388a1f664e32d6ddca55c7a249
Patch-mainline: v4.8-rc1
References: fate#319981

Follow-on arm64 ACPI/NUMA patches need to map MADT entries very early
(before kmalloc is usable).

Add acpi_map_madt_entry() which, indirectly, uses
early_memremap()/early_memunmap() to access the table and parse out
the mpidr.  The existing implementation of map_madt_entry() is
modified to take a pointer to the MADT as a parameter and the callers
adjusted.

Signed-off-by: David Daney <david.daney@cavium.com>
Acked-by: Catalin Marinas <catalin.marinas@arm.com>
Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
[mb: put the necessary bits around ifdefs to not change generic code]
Signed-off-by: Matthias Brugger <mbrugger@suse.com>
---
 drivers/acpi/processor_core.c |   61 ++++++++++++++++++++++++++++++++++++++++++
 include/acpi/processor.h      |    3 ++
 2 files changed, 64 insertions(+)

--- a/drivers/acpi/processor_core.c
+++ b/drivers/acpi/processor_core.c
@@ -111,6 +111,62 @@ static int map_gicc_mpidr(struct acpi_su
 	return -EINVAL;
 }
 
+#ifdef CONFIG_ARM64
+static phys_cpuid_t map_madt_entry(struct acpi_table_madt *madt,
+				   int type, u32 acpi_id, bool ignore_disabled)
+{
+	unsigned long madt_end, entry;
+	phys_cpuid_t phys_id = PHYS_CPUID_INVALID;	/* CPU hardware ID */
+
+	if (!madt)
+		return phys_id;
+
+	entry = (unsigned long)madt;
+	madt_end = entry + madt->header.length;
+
+	/* Parse all entries looking for a match. */
+
+	entry += sizeof(struct acpi_table_madt);
+	while (entry + sizeof(struct acpi_subtable_header) < madt_end) {
+		struct acpi_subtable_header *header =
+			(struct acpi_subtable_header *)entry;
+		if (header->type == ACPI_MADT_TYPE_LOCAL_APIC) {
+			if (!map_lapic_id(header, acpi_id, &phys_id, ignore_disabled))
+				break;
+		} else if (header->type == ACPI_MADT_TYPE_LOCAL_X2APIC) {
+			if (!map_x2apic_id(header, type, acpi_id, &phys_id, ignore_disabled))
+				break;
+		} else if (header->type == ACPI_MADT_TYPE_LOCAL_SAPIC) {
+			if (!map_lsapic_id(header, type, acpi_id, &phys_id, ignore_disabled))
+				break;
+		} else if (header->type == ACPI_MADT_TYPE_GENERIC_INTERRUPT) {
+			if (!map_gicc_mpidr(header, type, acpi_id, &phys_id, ignore_disabled))
+				break;
+		}
+		entry += header->length;
+	}
+	return phys_id;
+}
+
+phys_cpuid_t __init acpi_map_madt_entry(u32 acpi_id)
+{
+	struct acpi_table_madt *madt = NULL;
+	acpi_size tbl_size;
+	phys_cpuid_t rv;
+
+	acpi_get_table_with_size(ACPI_SIG_MADT, 0,
+				 (struct acpi_table_header **)&madt,
+				 &tbl_size);
+	if (!madt)
+		return PHYS_CPUID_INVALID;
+
+	rv = map_madt_entry(madt, 1, acpi_id, true);
+
+	early_acpi_os_unmap_memory(madt, tbl_size);
+
+	return rv;
+}
+#else
 static phys_cpuid_t map_madt_entry(int type, u32 acpi_id, bool ignore_disabled)
 {
 	unsigned long madt_end, entry;
@@ -151,6 +207,7 @@ static phys_cpuid_t map_madt_entry(int t
 	}
 	return phys_id;
 }
+#endif
 
 static phys_cpuid_t map_mat_entry(acpi_handle handle, int type, u32 acpi_id,
 				  bool ignore_disabled)
@@ -195,7 +252,11 @@ static phys_cpuid_t __acpi_get_phys_id(a
 
 	phys_id = map_mat_entry(handle, type, acpi_id, ignore_disabled);
 	if (invalid_phys_cpuid(phys_id))
+#ifdef CONFIG_ARM64
+		phys_id = map_madt_entry(get_madt_table(), type, acpi_id, ignore_disabled);
+#else
 		phys_id = map_madt_entry(type, acpi_id, ignore_disabled);
+#endif
 
 	return phys_id;
 }
--- a/include/acpi/processor.h
+++ b/include/acpi/processor.h
@@ -310,6 +310,9 @@ static inline int acpi_processor_get_bio
 phys_cpuid_t acpi_get_phys_id(acpi_handle, int type, u32 acpi_id);
 int acpi_map_cpuid(phys_cpuid_t phys_id, u32 acpi_id);
 int acpi_get_cpuid(acpi_handle, int type, u32 acpi_id);
+#ifdef CONFIG_ARM64
+phys_cpuid_t acpi_map_madt_entry(u32 acpi_id);
+#endif
 
 #ifdef CONFIG_ACPI_CPPC_LIB
 extern int acpi_cppc_processor_probe(struct acpi_processor *pr);
