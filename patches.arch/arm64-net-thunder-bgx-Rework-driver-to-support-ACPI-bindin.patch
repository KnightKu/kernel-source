From 55f60b3839acd9143c1631399cd0a0769a1f0863 Mon Sep 17 00:00:00 2001
From: Tomasz Nowicki <tomasz.nowicki@linaro.org>
Date: Tue, 16 Dec 2014 18:06:53 +0100
Subject: [PATCH] net, thunder, bgx: Rework driver to support ACPI binding.
Patch-mainline: No, need to be submitted.
Reference: fate#319980

Additional functionality aims to find out which PHYs belong to which
BGX instance in the ACPI way.

Signed-off-by: Tomasz Nowicki <tomasz.nowicki@linaro.org>
Signed-off-by: Robert Richter <rrichter@cavium.com>
Signed-off-by: Matthias Brugger <mbrugger@suse.com>
---
 drivers/net/ethernet/cavium/thunder/thunder_bgx.c | 39 ++++++++++++++++++++---
 1 file changed, 34 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/cavium/thunder/thunder_bgx.c b/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
index 959804b..cc2ff22 100644
--- a/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
+++ b/drivers/net/ethernet/cavium/thunder/thunder_bgx.c
@@ -886,6 +886,17 @@ static void bgx_get_qlm_mode(struct bgx *bgx)
 
 #ifdef CONFIG_ACPI
 
+static int bgx_match_phy_id(struct device *dev, void *data)
+{
+	struct phy_device *phydev = to_phy_device(dev);
+	u32 *phy_id = data;
+
+	if (phydev->addr == *phy_id)
+		return 1;
+
+	return 0;
+}
+
 static int acpi_get_mac_address(struct acpi_device *adev, u8 *dst)
 {
 	u8 mac[ETH_ALEN];
@@ -906,23 +917,41 @@ out:
 	return ret;
 }
 
-/* Currently only sets the MAC address. */
 static acpi_status bgx_acpi_register_phy(acpi_handle handle,
 					 u32 lvl, void *context, void **rv)
 {
+	struct acpi_reference_args args;
 	struct bgx *bgx = context;
 	struct acpi_device *adev;
+	struct device *phy_dev;
+	struct fwnode_handle *fwnode;
+	u32 phy_id;
 
 	if (acpi_bus_get_device(handle, &adev))
-		goto out;
+		return AE_OK;
 
-	acpi_get_mac_address(adev, bgx->lmac[bgx->lmac_count].mac);
+	fwnode = acpi_fwnode_handle(adev);
 
-	SET_NETDEV_DEV(&bgx->lmac[bgx->lmac_count].netdev, &bgx->pdev->dev);
+	if (acpi_node_get_property_reference(fwnode, "phy-handle", 0, &args))
+		return AE_OK;
 
+	if (acpi_dev_prop_read_single(args.adev, "phy-channel", DEV_PROP_U32,
+					&phy_id))
+		return AE_OK;
+
+	phy_dev = bus_find_device(&mdio_bus_type, NULL, (void *)&phy_id,
+				  bgx_match_phy_id);
+	if (!phy_dev)
+		return AE_OK;
+
+	SET_NETDEV_DEV(&bgx->lmac[bgx->lmac_count].netdev, &bgx->pdev->dev);
+	bgx->lmac[bgx->lmac_count].phydev = to_phy_device(phy_dev);
 	bgx->lmac[bgx->lmac_count].lmacid = bgx->lmac_count;
-out:
+
+	acpi_get_mac_address(adev, bgx->lmac[bgx->lmac_count].mac);
+
 	bgx->lmac_count++;
+
 	return AE_OK;
 }
 
-- 
2.6.2

