From: Steffen Maier <maier@linux.vnet.ibm.com>
Subject: zfcp: fix D_ID field with actual value on tracing SAN responses
Patch-mainline: v4.9-rc1
Git-commit: 771bf03537ddfa4a4dde62ef9dfbc82e4f77ab20
References: bnc#1003677, LTC#144312

Description:  zfcp: fix tracing regressions
Symptom:      Cannot distinguish trace level of trace records written with
              different trace levels.

              RECovery trace records do not show obviously if the LUN
              record field has a valid value or is n/a.

              Cannot interpret HBA error trace records for failed port
              actions, if it's for WKA (well known address) ports such as
              the fabric nameserver used for zfcp auto port scan.

              Cannot debug invalid handle situations with ports or LUNs.

              Especially if a request SAN trace record was lost due to
              trace buffer wrapping, we cannot see from which N_Port-ID the
              corresponding SAN response came from.

              Wrong payload length and confusing random payload data for
              RSPN (register symbolic port name) FC-GS responses
              (SAN trace area response tag: fsscth2).

              Cannot debug issues with larger SAN requests/responses
              such as with zfcp auto port scan where we need to see
              the currently active zone set.
Problem:      While retaining the actual filtering according to trace
              level, the following commits started to write such
              filtered records with a hardcoded record level of 1:
              commit 250a1352b95e1db3216e5c5d4f4365bea5122f4a
              [SCSI] zfcp: Redesign of the debug tracing for SCSI records.
              commit a54ca0f62f953898b05549391ac2a8a4dad6482b
              [SCSI] zfcp: Redesign of the debug tracing for HBA records.

              Explicit marking of an invalid LUN was lost with
              commit ae0904f60fab7cb20c48d32eefdd735e478b91fb
              zfcp: Redesign of the debug tracing for recovery actions.

              Since commit a54ca0f62f953898b05549391ac2a8a4dad6482b
              [SCSI] zfcp: Redesign of the debug tracing for HBA records.
              HBA records no longer contain WWPN, D_ID, or LUN to reduce
              duplicate information which is already in REC records. In
              contrast to "regular" target ports, we don't use recovery to
              open WKA ports such as directory/nameserver, so we don't get
              REC records.

              Handle information was lost with
              commit a54ca0f62f953898b05549391ac2a8a4dad6482b
              [SCSI] zfcp: Redesign of the debug tracing for HBA records.

              With commit 2c55b750a884b86dea8b4cc5f15e1484cc47a25c
              [SCSI] zfcp: Redesign of the debug tracing for SAN records.
              we lost the N_Port-ID where an ELS response comes from.
              With commit 7c7dc196814b9e1d5cc254dc579a5fa78ae524f7
              [SCSI] zfcp: Simplify handling of ct and els requests
              we lost the N_Port-ID where a CT response comes from.

              Commit 2c55b750a884b86dea8b4cc5f15e1484cc47a25c
              [SCSI] zfcp: Redesign of the debug tracing for SAN records.
              started to add FC_CT_HDR_LEN which made zfcp dump random data
              out of bounds for RSPN GS responses because u.rspn.rsp is the
              largest and last field in the union of struct zfcp_fc_req.
              Other request/response types only happened to stay within
              bounds due to the padding of the union or due to the trace
              capping of u.gspn.rsp to ZFCP_DBF_SAN_MAX_PAYLOAD.
              |
              Timestamp      : ...
              Area           : SAN
              Subarea        : 00
              Level          : 1
              Exception      : -
              CPU id         : ..
              Caller         : ...
              Record id      : 2
              Tag            : fsscth2
              Request id     : 0x...
              Destination ID : 0x00fffffc
              Payload short  : 01000000 fc020000 80020000 00000000
                               xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx <===
                               00000000 00000000 00000000 00000000
              Payload length : 32                                  <===
              |
              struct zfcp_fc_req {
                  [0] struct zfcp_fsf_ct_els ct_els;
                 [56] struct scatterlist sg_req;
                 [96] struct scatterlist sg_rsp;
                      union {
                          struct {req; rsp;} adisc;    SIZE: 28+28=   56
                          struct {req; rsp;} gid_pn;   SIZE: 24+20=   44
                          struct {rspsg; req;} gpn_ft; SIZE: 40*4+20=180
                          struct {req; rsp;} gspn;     SIZE: 20+273= 293
                          struct {req; rsp;} rspn;     SIZE: 277+16= 293
                [136] } u;
              }
              SIZE: 432

              The full payload of SAN trace records was lost with
              commit 2c55b750a884b86dea8b4cc5f15e1484cc47a25c
              [SCSI] zfcp: Redesign of the debug tracing for SAN records.
Solution:     Write records with their actual record level.

              Bring back
              commit d21e9daa63e009ce5b87bbcaa6d11ce48e07bbbe
              [SCSI] zfcp: Dont use 0 to indicate invalid LUN in rec trace.

              Introduce pseudo REC running records without any actual
              recovery action but including D_ID of WKA port on open/close.

              Restore tracing of handle for port and LUN with HBA records.

              GS uses an open WKA port handle and ELS just a D_ID, and only
              for ELS we could get D_ID from QTCB bottom via zfcp_fsf_req.
              To cover both cases, add a new field to zfcp_fsf_ct_els and
              fill it in on request to use in SAN response trace. Strictly
              speaking the D_ID on SAN response is the FC frame's S_ID. We
              don't need a field for the other end which is always us.

              Fix payload trace length for SAN request&response.

              Trace full payload of all SAN records (req,resp,iels) in
              associated PAYload trace record(s) if data spills SAN record.
              For the large GPN_FT response (4 pages), save space by not
              dumping any empty residual entries.
Reproduction: Increase the trace level of the HBA and SCSI trace area to
              the maximum of 6. Set an NPIV-enabled FCP device online in a
              SAN zone with other initiator ports. Perform some I/O.

Upstream-Description:

              zfcp: fix D_ID field with actual value on tracing SAN responses

              With commit 2c55b750a884b86dea8b4cc5f15e1484cc47a25c
              ("[SCSI] zfcp: Redesign of the debug tracing for SAN records.")
              we lost the N_Port-ID where an ELS response comes from.
              With commit 7c7dc196814b9e1d5cc254dc579a5fa78ae524f7
              ("[SCSI] zfcp: Simplify handling of ct and els requests")
              we lost the N_Port-ID where a CT response comes from.
              It's especially useful if the request SAN trace record
              with D_ID was already lost due to trace buffer wrap.

              GS uses an open WKA port handle and ELS just a D_ID, and
              only for ELS we could get D_ID from QTCB bottom via zfcp_fsf_req.
              To cover both cases, add a new field to zfcp_fsf_ct_els
              and fill it in on request to use in SAN response trace.
              Strictly speaking the D_ID on SAN response is the FC frame's S_ID.
              We don't need a field for the other end which is always us.

              Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
              Fixes: 2c55b750a884 ("[SCSI] zfcp: Redesign of the debug tracing for SAN records.")
              Fixes: 7c7dc196814b ("[SCSI] zfcp: Simplify handling of ct and els requests")
              Cc: <stable@vger.kernel.org> #2.6.38+
              Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
              Reviewed-by: Hannes Reinecke <hare@suse.com>
              Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>


Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.com>
---
 drivers/s390/scsi/zfcp_dbf.c |    2 +-
 drivers/s390/scsi/zfcp_fsf.c |    2 ++
 drivers/s390/scsi/zfcp_fsf.h |    4 +++-
 3 files changed, 6 insertions(+), 2 deletions(-)

--- a/drivers/s390/scsi/zfcp_dbf.c
+++ b/drivers/s390/scsi/zfcp_dbf.c
@@ -399,7 +399,7 @@ void zfcp_dbf_san_res(char *tag, struct
 
 	length = (u16)(ct_els->resp->length + FC_CT_HDR_LEN);
 	zfcp_dbf_san(tag, dbf, sg_virt(ct_els->resp), ZFCP_DBF_SAN_RES, length,
-		     fsf->req_id, 0);
+		     fsf->req_id, ct_els->d_id);
 }
 
 /**
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@ -1085,6 +1085,7 @@ int zfcp_fsf_send_ct(struct zfcp_fc_wka_
 
 	req->handler = zfcp_fsf_send_ct_handler;
 	req->qtcb->header.port_handle = wka_port->handle;
+	ct->d_id = wka_port->d_id;
 	req->data = ct;
 
 	zfcp_dbf_san_req("fssct_1", req, wka_port->d_id);
@@ -1188,6 +1189,7 @@ int zfcp_fsf_send_els(struct zfcp_adapte
 
 	hton24(req->qtcb->bottom.support.d_id, d_id);
 	req->handler = zfcp_fsf_send_els_handler;
+	els->d_id = d_id;
 	req->data = els;
 
 	zfcp_dbf_san_req("fssels1", req, d_id);
--- a/drivers/s390/scsi/zfcp_fsf.h
+++ b/drivers/s390/scsi/zfcp_fsf.h
@@ -3,7 +3,7 @@
  *
  * Interface to the FSF support functions.
  *
- * Copyright IBM Corporation 2002, 2010
+ * Copyright IBM Corp. 2002, 2015
  */
 
 #ifndef FSF_H
@@ -462,6 +462,7 @@ struct zfcp_blk_drv_data {
  * @handler_data: data passed to handler function
  * @port: Optional pointer to port for zfcp internal ELS (only test link ADISC)
  * @status: used to pass error status to calling function
+ * @d_id: Destination ID of either open WKA port for CT or of D_ID for ELS
  */
 struct zfcp_fsf_ct_els {
 	struct scatterlist *req;
@@ -470,6 +471,7 @@ struct zfcp_fsf_ct_els {
 	void *handler_data;
 	struct zfcp_port *port;
 	int status;
+	u32 d_id;
 };
 
 #endif				/* FSF_H */
