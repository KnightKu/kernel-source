From: Jan Höppner <hoeppner@linux.vnet.ibm.com>
Subject: s390/dasd: Refactor dasd format functions
Patch-mainline: v4.6-rc1
Git-commit: 570d237c19f8d0f1dfd214767f2d995b8291138a
References: bsc#1025482, FATE#321527, LTC#146542

Summary:     dasd: Add new ioctl BIODASDCHECKFMT
Description: Implement new DASD IOCTL BIODASDCHECKFMT to check a range of
             tracks on a DASD volume for correct formatting. The following
             characteristics are checked:
             - Block size
             - ECKD key length
             - ECKD record ID
             - Number of records per track


Upstream-Description:

             s390/dasd: Refactor dasd format functions

             Prepare for new format checking function by renaming functions and
             moving reusable code to separate functions:

             - Move sanity checks into a new function and make it reusable.
             - Move common format code to a new function called
               dasd_eckd_format_process_data.
             - Create the generic function dasd_eckd_format_build_ccw_req, which
               itself will then decide what ccw request is being built according to
               the input data. (with upcoming functionality).

             Signed-off-by: Jan Höppner <hoeppner@linux.vnet.ibm.com>
             Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Jan Höppner <hoeppner@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.com>
---
 drivers/s390/block/dasd_eckd.c |   58 ++++++++++++++++++++++++++++++++---------
 1 file changed, 46 insertions(+), 12 deletions(-)

--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -2403,22 +2403,26 @@ dasd_eckd_build_format(struct dasd_devic
 	return fcp;
 }
 
-static int
-dasd_eckd_format_device(struct dasd_device *base,
-			struct format_data_t *fdata,
-			int enable_pav)
+/*
+ * Wrapper function to build a CCW request depending on input data
+ */
+static struct dasd_ccw_req *
+dasd_eckd_format_build_ccw_req(struct dasd_device *base,
+			       struct format_data_t *fdata, int enable_pav)
+{
+	return dasd_eckd_build_format(base, fdata, enable_pav);
+}
+
+/*
+ * Sanity checks on format_data
+ */
+static int dasd_eckd_format_sanity_checks(struct dasd_device *base,
+					  struct format_data_t *fdata)
 {
-	struct dasd_ccw_req *cqr, *n;
 	struct dasd_eckd_private *private;
-	struct list_head format_queue;
-	struct dasd_device *device;
-	int old_start, old_stop, format_step;
-	int step, retry;
-	int rc = 0;
 
 	private = (struct dasd_eckd_private *) base->private;
 
-	/* Sanity checks. */
 	if (fdata->start_unit >=
 	    (private->real_cyl * private->rdc_data.trk_per_cyl)) {
 		dev_warn(&base->cdev->dev,
@@ -2445,6 +2449,29 @@ dasd_eckd_format_device(struct dasd_devi
 			 fdata->blksize);
 		return -EINVAL;
 	}
+	return 0;
+}
+
+/*
+ * This function will process format_data originally coming from an IOCTL
+ */
+static int dasd_eckd_format_process_data(struct dasd_device *base,
+					 struct format_data_t *fdata,
+					 int enable_pav)
+{
+	struct dasd_ccw_req *cqr, *n;
+	struct dasd_eckd_private *private;
+	struct list_head format_queue;
+	struct dasd_device *device;
+	int old_start, old_stop, format_step;
+	int step, retry;
+	int rc;
+
+	private = (struct dasd_eckd_private *) base->private;
+
+	rc = dasd_eckd_format_sanity_checks(base, fdata);
+	if (rc)
+		return rc;
 
 	INIT_LIST_HEAD(&format_queue);
 
@@ -2462,7 +2489,8 @@ dasd_eckd_format_device(struct dasd_devi
 					fdata->start_unit + format_step - 1;
 			}
 
-			cqr = dasd_eckd_build_format(base, fdata, enable_pav);
+			cqr = dasd_eckd_format_build_ccw_req(base, fdata,
+							     enable_pav);
 			if (IS_ERR(cqr)) {
 				rc = PTR_ERR(cqr);
 				if (rc == -ENOMEM) {
@@ -2509,6 +2537,12 @@ out:
 	return rc;
 }
 
+static int dasd_eckd_format_device(struct dasd_device *base,
+				   struct format_data_t *fdata, int enable_pav)
+{
+	return dasd_eckd_format_process_data(base, fdata, enable_pav);
+}
+
 static void dasd_eckd_handle_terminated_request(struct dasd_ccw_req *cqr)
 {
 	if (cqr->retries < 0) {
