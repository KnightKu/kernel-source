Date:	Fri, 5 Sep 2014 15:57:43 +0900
From:	Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Subject: [PATCH] acpi : Add container online uevent to acpi_bus_attach

Patch-mainline: Not yet, reviewing no linux-acpi
References: bnc#881784
Target: SLE-12

Container online uevent was deleted by "46394fd01 : ACPI / hotplug:
Move container-specific code out of the core" because container-
specific uevent is raised to udev by attaching container device.
But the container-specific uevent is not useful.

In my box, conainer device has CPU and memory devices. In this case,
when hot adding container device, the following uevets are raised to
udev.

  # udevadm monitor --kernel
  monitor will print the received events for:
  KERNEL - the kernel uevent

  KERNEL[...] add      /devices/system/container/ACPI0004:01 (container)
  <snip>
  KERNEL[...] add      /devices/system/memory/memory2048 (memory)
  KERNEL[...] add      /devices/system/memory/memory2049 (memory)
  <snip>
  KERNEL[...] add      /devices/system/memory/memory2063 (memory)
  <snip>
  KERNEL[...] add      /devices/system/cpu/cpu60 (cpu)
  <snip>
  KERNEL[...] add      /devices/system/cpu/cpu119 (cpu)

When udev catches the container add uevent in my box, udev executes
user land script for onlining all child's devices. But memory and CPU
devices have not been attached at this time. So user land script fails.

One of solutions is that user land script waits for all child's devices
to attach. But user land script has no way to know all child's devices
were attached.

So the patch adds container online uevent to acpi_bus_sttach(). By
applying
the patch, container online uevent is raised to udev after all child's
devices were attached as follows:

  # udevadm monitor --kernel
  monitor will print the received events for:
  KERNEL - the kernel uevent

  KERNEL[...] add      /devices/system/container/ACPI0004:01 (container)
  <snip>
  KERNEL[...] add      /devices/system/memory/memory2048 (memory)
  KERNEL[...] add      /devices/system/memory/memory2049 (memory)
  <snip>
  KERNEL[...] add      /devices/system/memory/memory2063 (memory)
  <snip>
  KERNEL[...] add      /devices/system/cpu/cpu60 (cpu)
  <snip>
  KERNEL[...] add      /devices/system/cpu/cpu119 (cpu)
  KERNEL[...] online   /devices/system/container/ACPI0004:01 (container)

So if user land script is executed after raising the container online
uevent, it guarantees that all child's devices were attached.

Signed-off-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 drivers/acpi/container.c | 15 +++++++++++++++
 drivers/acpi/internal.h  |  7 +++++++
 drivers/acpi/scan.c      |  3 +++
 3 files changed, 25 insertions(+)

--- a/drivers/acpi/container.c
+++ b/drivers/acpi/container.c
@@ -43,6 +43,21 @@ static const struct acpi_device_id conta
 	{"", 0},
 };
 
+void notify_container_device(struct acpi_device *adev)
+{
+	struct device *dev = acpi_driver_data(adev);
+
+	kobject_uevent(&dev->kobj, KOBJ_ONLINE);
+}
+
+int is_container_device(struct acpi_device *adev)
+{
+	if (acpi_match_device_ids(adev, container_device_ids))
+		return 0;
+
+	return 1;
+}
+
 static int acpi_container_offline(struct container_dev *cdev)
 {
 	struct acpi_device *adev = ACPI_COMPANION(&cdev->dev);
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -46,6 +46,13 @@ void acpi_memory_hotplug_init(void);
 #else
 static inline void acpi_memory_hotplug_init(void) {}
 #endif
+#ifdef CONFIG_ACPI_CONTAINER
+int is_container_device(struct acpi_device *adev);
+void notify_container_device(struct acpi_device *adev);
+#else
+static inline int is_container_device(struct acpi_device *adev) { return 0; }
+static inline void notify_container_device(struct acpi_device *adev) {}
+#endif
 #ifdef CONFIG_X86
 void acpi_cmos_rtc_init(void);
 #else
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1970,6 +1970,9 @@ static void acpi_bus_attach(struct acpi_
  ok:
 	list_for_each_entry(child, &device->children, node)
 		acpi_bus_attach(child);
+
+	if (is_container_device(device))
+		notify_container_device(device);
 }
 
 /**
