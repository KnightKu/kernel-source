From: Borislav Petkov <bp@suse.de>
Date: Tue, 2 Feb 2016 10:59:53 +0100
Subject: EDAC: Balance workqueue setup and teardown
Git-commit: 096676061987c613bdacddbae838cb63a815db94
Patch-mainline: v4.5-rc1
References: bsc#950358

We use the ->edac_check function pointers to determine whether we need
to setup a polling workqueue. However, the destroy path is not balanced
and we might try to teardown an unitialized workqueue.

Balance init and destroy paths by looking at ->edac_check in both cases.
Set op_state to OP_OFFLINE *before* destroying anything.

Reported-by: Zhiqiang Hou <Zhiqiang.Hou@freescale.com>
Cc: Varun Sethi <Varun.Sethi@freescale.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 drivers/edac/edac_mc.c  |   15 +++++++--------
 drivers/edac/edac_pci.c |    8 +++-----
 2 files changed, 10 insertions(+), 13 deletions(-)

--- a/drivers/edac/edac_mc.c
+++ b/drivers/edac/edac_mc.c
@@ -583,8 +583,6 @@ static void edac_mc_workq_setup(struct m
  */
 static void edac_mc_workq_teardown(struct mem_ctl_info *mci)
 {
-	mci->op_state = OP_OFFLINE;
-
 	edac_stop_work(&mci->work);
 }
 
@@ -772,7 +770,7 @@ int edac_mc_add_mc_with_groups(struct me
 	}
 
 	/* If there IS a check routine, then we are running POLLED */
-	if (mci->edac_check != NULL) {
+	if (mci->edac_check) {
 		/* This instance is NOW RUNNING */
 		mci->op_state = OP_RUNNING_POLL;
 
@@ -823,15 +821,16 @@ struct mem_ctl_info *edac_mc_del_mc(stru
 		return NULL;
 	}
 
+	/* mark MCI offline: */
+	mci->op_state = OP_OFFLINE;
+
 	if (!del_mc_from_global_list(mci))
 		edac_mc_owner = NULL;
-	mutex_unlock(&mem_ctls_mutex);
 
-	/* flush workq processes */
-	edac_mc_workq_teardown(mci);
+	mutex_unlock(&mem_ctls_mutex);
 
-	/* marking MCI offline */
-	mci->op_state = OP_OFFLINE;
+	if (mci->edac_check)
+		edac_mc_workq_teardown(mci);
 
 	/* remove from sysfs */
 	edac_remove_sysfs_mci_device(mci);
--- a/drivers/edac/edac_pci.c
+++ b/drivers/edac/edac_pci.c
@@ -276,8 +276,6 @@ static void edac_pci_workq_teardown(stru
 {
 	edac_dbg(0, "\n");
 
-	pci->op_state = OP_OFFLINE;
-
 	edac_stop_work(&pci->work);
 }
 
@@ -324,7 +322,7 @@ int edac_pci_add_device(struct edac_pci_
 		goto fail1;
 	}
 
-	if (pci->edac_check != NULL) {
+	if (pci->edac_check) {
 		pci->op_state = OP_RUNNING_POLL;
 
 		edac_pci_workq_setup(pci, 1000);
@@ -385,8 +383,8 @@ struct edac_pci_ctl_info *edac_pci_del_d
 
 	mutex_unlock(&edac_pci_ctls_mutex);
 
-	/* stop the workq timer */
-	edac_pci_workq_teardown(pci);
+	if (pci->edac_check)
+		edac_pci_workq_teardown(pci);
 
 	edac_printk(KERN_INFO, EDAC_PCI,
 		"Removed device %d for %s %s: DEV %s\n",
