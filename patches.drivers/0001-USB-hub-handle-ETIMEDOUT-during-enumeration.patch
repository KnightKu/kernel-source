From 69dba5c2d0a61b202af67a32ee486b30e43181d2 Mon Sep 17 00:00:00 2001
From: Oliver Neukum <oneukum@suse.de>
Date: Wed, 19 Feb 2014 09:27:42 +0100
References: bnc#866012
Subject: [PATCH 1/2] USB: hub: handle -ETIMEDOUT during enumeration
Patch-mainline: Submitted, http://www.spinics.net/lists/linux-usb/msg103228.html

I have a device that times out if enumerated after being
switched on while connected. Increasing timeouts or retries
doesn't help. The device needs an additional reset.

Signed-off-by: Oliver Neukum <oliver@neukum.org>
---
 drivers/usb/core/hub.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index b329789..4620e49 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -3756,6 +3756,7 @@ hub_port_init (struct usb_hub *hub, struct usb_device *udev, int port1,
 	enum usb_device_speed	oldspeed = udev->speed;
 	const char		*speed;
 	int			devnum = udev->devnum;
+	bool			second_reset = false;
 
 	/* root hub ports have a slightly longer reset period
 	 * (from USB 2.0 spec, section 7.1.7.5)
@@ -3876,6 +3877,20 @@ hub_port_init (struct usb_hub *hub, struct usb_device *udev, int port1,
 					USB_DT_DEVICE << 8, 0,
 					buf, GET_DESCRIPTOR_BUFSIZE,
 					initial_descriptor_timeout);
+
+				/*
+				 * Some devices time out if they are powered on
+				 * when already connected. They need a second
+				 * reset.
+				 */
+				if (r == -ETIMEDOUT && !second_reset) {
+					retval = hub_port_reset(hub, port1, udev, delay, false);
+					second_reset = true;
+					if (retval < 0)
+						dev_err(&udev->dev,
+							"recovery from timeout failed, error %d\n",
+							retval);
+				}
 				switch (buf->bMaxPacketSize0) {
 				case 8: case 16: case 32: case 64: case 255:
 					if (buf->bDescriptorType ==
-- 
1.8.4.5

