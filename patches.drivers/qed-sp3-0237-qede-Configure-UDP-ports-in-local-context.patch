From: "Chopra, Manish" <Manish.Chopra@cavium.com>
Date: Mon, 24 Apr 2017 10:00:47 -0700
Subject: qede: Configure UDP ports in local context.
Patch-mainline: v4.12-rc1
Git-commit: 327a2b750c486c8e8f390dcff888881ad54d2f23 (partial)
References: bsc#1019695 FATE#321703 bsc#1019696 FATE#321702

This patch configures UDP ports locally instead of
configuring them in deferred context which would be
helpful in synchronizing UDP ports configuration for VFs
which will be enabled in further patches.

Signed-off-by: Manish Chopra <manish.chopra@cavium.com>
Signed-off-by: Yuval Mintz <yuval.mintz@cavium.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 drivers/net/ethernet/qlogic/qede/qede.h      |  2 -
 drivers/net/ethernet/qlogic/qede/qede_main.c | 79 +++++++++++++++++-----------
 2 files changed, 47 insertions(+), 34 deletions(-)

diff --git a/drivers/net/ethernet/qlogic/qede/qede.h b/drivers/net/ethernet/qlogic/qede/qede.h
index 79e37a3828b1..26eadad99126 100644
--- a/drivers/net/ethernet/qlogic/qede/qede.h
+++ b/drivers/net/ethernet/qlogic/qede/qede.h
@@ -413,8 +413,6 @@ struct qede_fastpath {
 #define QEDE_TUNN_CSUM_UNNECESSARY	BIT(2)
 
 #define QEDE_SP_RX_MODE			1
-#define QEDE_SP_VXLAN_PORT_CONFIG	2
-#define QEDE_SP_GENEVE_PORT_CONFIG	3
 
 #ifdef CONFIG_RFS_ACCEL
 int qede_rx_flow_steer(struct net_device *dev, const struct sk_buff *skb,
diff --git a/drivers/net/ethernet/qlogic/qede/qede_main.c b/drivers/net/ethernet/qlogic/qede/qede_main.c
index efe090b743c1..c4b196ddcb3f 100644
--- a/drivers/net/ethernet/qlogic/qede/qede_main.c
+++ b/drivers/net/ethernet/qlogic/qede/qede_main.c
@@ -2826,7 +2826,9 @@ static void qede_add_vxlan_port(struct net_device *dev,
 				sa_family_t sa_family, __be16 port)
 {
 	struct qede_dev *edev = netdev_priv(dev);
+	struct qed_tunn_params tunn_params;
 	u16 t_port = ntohs(port);
+	int rc;
 
 	if (!edev->dev_info.common.vxlan_enable)
 		return;
@@ -2834,29 +2836,43 @@ static void qede_add_vxlan_port(struct net_device *dev,
 	if (edev->vxlan_dst_port)
 		return;
 
-	edev->vxlan_dst_port = t_port;
+	memset(&tunn_params, 0, sizeof(tunn_params));
+	tunn_params.update_vxlan_port = 1;
+	tunn_params.vxlan_port = t_port;
 
-	DP_VERBOSE(edev, QED_MSG_DEBUG, "Added vxlan port=%d", t_port);
+	__qede_lock(edev);
+	rc = edev->ops->tunn_config(edev->cdev, &tunn_params);
+	__qede_unlock(edev);
 
-	set_bit(QEDE_SP_VXLAN_PORT_CONFIG, &edev->sp_flags);
-	schedule_delayed_work(&edev->sp_task, 0);
+	if (!rc) {
+		edev->vxlan_dst_port = t_port;
+		DP_VERBOSE(edev, QED_MSG_DEBUG, "Added vxlan port=%d", t_port);
+	} else {
+		DP_NOTICE(edev, "Failed to add vxlan UDP port=%d\n", t_port);
+	}
 }
 
 static void qede_del_vxlan_port(struct net_device *dev,
 				sa_family_t sa_family, __be16 port)
 {
 	struct qede_dev *edev = netdev_priv(dev);
+	struct qed_tunn_params tunn_params;
 	u16 t_port = ntohs(port);
 
 	if (t_port != edev->vxlan_dst_port)
 		return;
 
+	memset(&tunn_params, 0, sizeof(tunn_params));
+	tunn_params.update_vxlan_port = 1;
+	tunn_params.vxlan_port = 0;
+
+	__qede_lock(edev);
+	edev->ops->tunn_config(edev->cdev, &tunn_params);
+	__qede_unlock(edev);
+
 	edev->vxlan_dst_port = 0;
 
 	DP_VERBOSE(edev, QED_MSG_DEBUG, "Deleted vxlan port=%d", t_port);
-
-	set_bit(QEDE_SP_VXLAN_PORT_CONFIG, &edev->sp_flags);
-	schedule_delayed_work(&edev->sp_task, 0);
 }
 #endif
 
@@ -2865,7 +2881,9 @@ static void qede_add_geneve_port(struct net_device *dev,
 				 sa_family_t sa_family, __be16 port)
 {
 	struct qede_dev *edev = netdev_priv(dev);
+	struct qed_tunn_params tunn_params;
 	u16 t_port = ntohs(port);
+	int rc;
 
 	if (!edev->dev_info.common.geneve_enable)
 		return;
@@ -2873,27 +2891,43 @@ static void qede_add_geneve_port(struct net_device *dev,
 	if (edev->geneve_dst_port)
 		return;
 
-	edev->geneve_dst_port = t_port;
+	memset(&tunn_params, 0, sizeof(tunn_params));
+	tunn_params.update_geneve_port = 1;
+	tunn_params.geneve_port = t_port;
 
-	DP_VERBOSE(edev, QED_MSG_DEBUG, "Added geneve port=%d", t_port);
-	set_bit(QEDE_SP_GENEVE_PORT_CONFIG, &edev->sp_flags);
-	schedule_delayed_work(&edev->sp_task, 0);
+	__qede_lock(edev);
+	rc = edev->ops->tunn_config(edev->cdev, &tunn_params);
+	__qede_unlock(edev);
+
+	if (!rc) {
+		edev->geneve_dst_port = t_port;
+		DP_VERBOSE(edev, QED_MSG_DEBUG, "Added geneve port=%d", t_port);
+	} else {
+		DP_NOTICE(edev, "Failed to add geneve UDP port=%d\n", t_port);
+	}
 }
 
 static void qede_del_geneve_port(struct net_device *dev,
 				 sa_family_t sa_family, __be16 port)
 {
 	struct qede_dev *edev = netdev_priv(dev);
+	struct qed_tunn_params tunn_params;
 	u16 t_port = ntohs(port);
 
 	if (t_port != edev->geneve_dst_port)
 		return;
 
+	memset(&tunn_params, 0, sizeof(tunn_params));
+	tunn_params.update_geneve_port = 1;
+	tunn_params.geneve_port = 0;
+
+	__qede_lock(edev);
+	edev->ops->tunn_config(edev->cdev, &tunn_params);
+	__qede_unlock(edev);
+
 	edev->geneve_dst_port = 0;
 
 	DP_VERBOSE(edev, QED_MSG_DEBUG, "Deleted geneve port=%d", t_port);
-	set_bit(QEDE_SP_GENEVE_PORT_CONFIG, &edev->sp_flags);
-	schedule_delayed_work(&edev->sp_task, 0);
 }
 
 static int qede_set_vf_trust(struct net_device *dev, int vfidx, bool setting)
@@ -3234,7 +3268,6 @@ static void qede_sp_task(struct work_struct *work)
 {
 	struct qede_dev *edev = container_of(work, struct qede_dev,
 					     sp_task.work);
-	struct qed_dev *cdev = edev->cdev;
 
 	__qede_lock(edev);
 
@@ -3242,24 +3275,6 @@ static void qede_sp_task(struct work_struct *work)
 		if (edev->state == QEDE_STATE_OPEN)
 			qede_config_rx_mode(edev->ndev);
 
-	if (test_and_clear_bit(QEDE_SP_VXLAN_PORT_CONFIG, &edev->sp_flags)) {
-		struct qed_tunn_params tunn_params;
-
-		memset(&tunn_params, 0, sizeof(tunn_params));
-		tunn_params.update_vxlan_port = 1;
-		tunn_params.vxlan_port = edev->vxlan_dst_port;
-		qed_ops->tunn_config(cdev, &tunn_params);
-	}
-
-	if (test_and_clear_bit(QEDE_SP_GENEVE_PORT_CONFIG, &edev->sp_flags)) {
-		struct qed_tunn_params tunn_params;
-
-		memset(&tunn_params, 0, sizeof(tunn_params));
-		tunn_params.update_geneve_port = 1;
-		tunn_params.geneve_port = edev->geneve_dst_port;
-		qed_ops->tunn_config(cdev, &tunn_params);
-	}
-
 #ifdef CONFIG_RFS_ACCEL
 	if (test_and_clear_bit(QEDE_SP_ARFS_CONFIG, &edev->sp_flags)) {
 		if (edev->state == QEDE_STATE_OPEN)
-- 
1.8.5.6

