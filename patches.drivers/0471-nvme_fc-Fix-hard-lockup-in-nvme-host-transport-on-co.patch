From a488aefb324c7ab4bc466559637f69bc09c469a5 Mon Sep 17 00:00:00 2001
From: James Smart <jsmart2021@gmail.com>
Date: Thu, 15 Jun 2017 23:44:30 -0700
Subject: nvme_fc: Fix hard lockup in nvme host transport on controller delete
References: bsc#1044640
Patch-mainline: Never, SUSE Specific

If a controller is removed, starting devloss_tmo for a reconnect,
followed by a remote port loss, a deadlock occurs over the rport lock.
The remoteport devloss_tmo routine has attempted to cancel the
controller reconnect as it won't be successful. It is holding the
rport lock and in a waitqueue sync. Meanwhile, the reconnect is actually
occurring (in the workqueue) and is attempting to claim the rport lock.
Deadlock.

Fix by removing the _sync option to the termination of the scheduled
reconnect delay timer. There was no need to wait in the first place.

Signed-off-by: Paul Ely <Paul.Ely@broadcom.com>
Signed-off-by: James Smart <james.smart@broadcom.com>
Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 drivers/nvme/host/fc.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/nvme/host/fc.c b/drivers/nvme/host/fc.c
index 14a45f3ee1b1..3cc8a7a054d1 100644
--- a/drivers/nvme/host/fc.c
+++ b/drivers/nvme/host/fc.c
@@ -722,7 +722,7 @@ nvmet_fc_start_dev_loss_tmo(struct nvme_fc_ctrl *ctrl, u32 dev_loss_tmo)
 		 * If awaiting the reconnect, terminate it as it'll only
 		 * fail.
 		 */
-		cancel_delayed_work_sync(&ctrl->connect_work);
+		cancel_delayed_work(&ctrl->connect_work);
 		break;
 
 	case NVME_CTRL_RESETTING:
-- 
2.12.3

