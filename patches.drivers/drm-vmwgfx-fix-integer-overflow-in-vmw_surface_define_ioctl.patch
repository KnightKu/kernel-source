From: Li Qiang <liq3ea@gmail.com>
Date: Mon Mar 27 20:10:53 2017 -0700
Subject: drm/vmwgfx: fix integer overflow in vmw_surface_define_ioctl()
Patch-mainline: Queued in driver maintainer repository
Git-repo: git://people.freedesktop.org/~thomash/linux
Git-commit: e7e11f99564222d82f0ce84bd521e57d78a6b678
References: boo#1031440 CVE-2017-7294

In vmw_surface_define_ioctl(), the 'num_sizes' is the sum of the
'req->mip_levels' array. This array can be assigned any value from
the user space. As both the 'num_sizes' and the array is uint32_t,
it is easy to make 'num_sizes' overflow. The later 'mip_levels' is
used as the loop count. This can lead an oob write. Add the check of
'req->mip_levels' to avoid this.

Cc: <stable@vger.kernel.org>
Signed-off-by: Li Qiang <liqiang6-s@360.cn>
Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
Signed-off-by: Max Staudt <mstaudt@suse.de>
---
 drivers/gpu/drm/vmwgfx/vmwgfx_resource.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_resource.c
@@ -1300,8 +1300,13 @@
 			128;
 
 	num_sizes = 0;
-	for (i = 0; i < DRM_VMW_MAX_SURFACE_FACES; ++i)
+	for (i = 0; i < DRM_VMW_MAX_SURFACE_FACES; ++i) {
+		if (req->mip_levels[i] > DRM_VMW_MAX_MIP_LEVELS) {
+			ret = -EINVAL;
+			goto out_err0;
+		}
 		num_sizes += req->mip_levels[i];
+	}
 
 	if (num_sizes > DRM_VMW_MAX_SURFACE_FACES * DRM_VMW_MAX_MIP_LEVELS ||
 	    num_sizes == 0)
