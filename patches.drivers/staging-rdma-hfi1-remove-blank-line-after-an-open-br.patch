From: Jubin John <jubin.john@intel.com>
Subject: staging/rdma/hfi1: Remove blank line after an open brace
Git-commit: 458e86ab471b44a28a736cb8b0d364f3ec0d3e3e
Patch-mainline: v4.6
References: bsc#973818, fate#319242
Acked-by: Jiri Bohac <jbohac@suse.cz>

Remove blank line after an open brace to fix checkpatch check:
CHECK: Blank lines aren't necessary after an open brace '{'

Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
Reviewed-by: Ira Weiny <ira.weiny@intel.com>
Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
Signed-off-by: Jubin John <jubin.john@intel.com>
Signed-off-by: Doug Ledford <dledford@redhat.com>
---
 drivers/staging/rdma/hfi1/chip.c   |    5 -----
 drivers/staging/rdma/hfi1/driver.c |    3 ---
 drivers/staging/rdma/hfi1/mad.c    |    2 --
 drivers/staging/rdma/hfi1/qp.c     |    1 -
 drivers/staging/rdma/hfi1/qsfp.c   |    2 --
 drivers/staging/rdma/hfi1/sdma.c   |    2 --
 6 files changed, 15 deletions(-)

--- a/drivers/staging/rdma/hfi1/chip.c
+++ b/drivers/staging/rdma/hfi1/chip.c
@@ -1535,7 +1535,6 @@ static u64 read_write_cpu(struct hfi1_de
 			  u64 __percpu *cntr,
 			  int vl, int mode, u64 data)
 {
-
 	u64 ret = 0;
 
 	if (vl != CNTR_INVALID_VL)
@@ -5928,7 +5927,6 @@ static void handle_qsfp_int(struct hfi1_
 	u64 qsfp_int_mgmt = (u64)(QSFP_HFI0_INT_N | QSFP_HFI0_MODPRST_N);
 
 	if (reg & QSFP_HFI0_MODPRST_N) {
-
 		dd_dev_info(dd, "%s: ModPresent triggered QSFP interrupt\n",
 				__func__);
 
@@ -5992,7 +5990,6 @@ static void handle_qsfp_int(struct hfi1_
 	}
 
 	if (reg & QSFP_HFI0_INT_N) {
-
 		dd_dev_info(dd, "%s: IntN triggered QSFP interrupt\n",
 				__func__);
 		spin_lock_irqsave(&ppd->qsfp_info.qsfp_lock, flags);
@@ -9263,7 +9260,6 @@ void qsfp_event(struct work_struct *work
 	dc_start(dd);
 
 	if (qd->cache_refresh_required) {
-
 		set_qsfp_int_n(ppd, 0);
 
 		wait_for_qsfp_init(ppd);
@@ -10119,7 +10115,6 @@ int set_link_state(struct hfi1_pportdata
 				"%s: logical state did not change to ACTIVE\n",
 				__func__);
 		} else {
-
 			/* tell all engines to go running */
 			sdma_all_running(dd);
 
--- a/drivers/staging/rdma/hfi1/driver.c
+++ b/drivers/staging/rdma/hfi1/driver.c
@@ -440,7 +440,6 @@ drop:
 static inline void init_packet(struct hfi1_ctxtdata *rcd,
 			      struct hfi1_packet *packet)
 {
-
 	packet->rsize = rcd->rcvhdrqentsize; /* words */
 	packet->maxcnt = rcd->rcvhdrq_cnt * packet->rsize; /* words */
 	packet->rcd = rcd;
@@ -755,7 +754,6 @@ static inline void process_rcv_update(in
 
 static inline void finish_packet(struct hfi1_packet *packet)
 {
-
 	/*
 	 * Nothing we need to free for the packet.
 	 *
@@ -769,7 +767,6 @@ static inline void finish_packet(struct
 
 static inline void process_rcv_qp_work(struct hfi1_packet *packet)
 {
-
 	struct hfi1_ctxtdata *rcd;
 	struct rvt_qp *qp, *nqp;
 
--- a/drivers/staging/rdma/hfi1/mad.c
+++ b/drivers/staging/rdma/hfi1/mad.c
@@ -2183,7 +2183,6 @@ struct opa_port_error_info_msg {
 	__be32 error_info_select_mask;
 	__be32 reserved1;
 	struct _port_ei {
-
 		u8 port_number;
 		u8 reserved2[7];
 
@@ -3140,7 +3139,6 @@ static int pma_set_opa_portstatus(struct
 
 	for_each_set_bit(vl, (unsigned long *)&(vl_select_mask),
 			 8 * sizeof(vl_select_mask)) {
-
 		if (counter_select & CS_PORT_XMIT_DATA)
 			write_port_cntr(ppd, C_TX_FLIT_VL, idx_from_vl(vl), 0);
 
--- a/drivers/staging/rdma/hfi1/qp.c
+++ b/drivers/staging/rdma/hfi1/qp.c
@@ -464,7 +464,6 @@ static int iowait_sleep(
 
 	spin_lock_irqsave(&qp->s_lock, flags);
 	if (ib_rvt_state_ops[qp->state] & RVT_PROCESS_RECV_OK) {
-
 		/*
 		 * If we couldn't queue the DMA request, save the info
 		 * and try again later rather than destroying the
--- a/drivers/staging/rdma/hfi1/qsfp.c
+++ b/drivers/staging/rdma/hfi1/qsfp.c
@@ -359,7 +359,6 @@ int refresh_qsfp_cache(struct hfi1_pport
 
 	/* Is paging enabled? */
 	if (!(cache[2] & 4)) {
-
 		/* Paging enabled, page 03 required */
 		if ((cache[195] & 0xC0) == 0xC0) {
 			/* all */
@@ -520,7 +519,6 @@ int qsfp_dump(struct hfi1_pportdata *ppd
 	lenstr[1] = '\0';
 
 	if (ppd->qsfp_info.cache_valid) {
-
 		if (QSFP_IS_CU(cache[QSFP_MOD_TECH_OFFS]))
 			sprintf(lenstr, "%dM ", cache[QSFP_MOD_LEN_OFFS]);
 
--- a/drivers/staging/rdma/hfi1/sdma.c
+++ b/drivers/staging/rdma/hfi1/sdma.c
@@ -475,7 +475,6 @@ static void sdma_err_halt_wait(struct wo
 static void sdma_err_progress_check_schedule(struct sdma_engine *sde)
 {
 	if (!is_bx(sde->dd) && HFI1_CAP_IS_KSET(SDMA_AHG)) {
-
 		unsigned index;
 		struct hfi1_devdata *dd = sde->dd;
 
@@ -1238,7 +1237,6 @@ void sdma_exit(struct hfi1_devdata *dd)
 
 	for (this_idx = 0; dd->per_sdma && this_idx < dd->num_sdma;
 			++this_idx) {
-
 		sde = &dd->per_sdma[this_idx];
 		if (!list_empty(&sde->dmawait))
 			dd_dev_err(dd, "sde %u: dmawait list not empty!\n",
