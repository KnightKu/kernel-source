From df590c693c5f90315627e9a50ebb44316ed67d5c Mon Sep 17 00:00:00 2001
From: Johan Hovold <johan@kernel.org>
Date: Mon, 6 Feb 2017 16:28:14 +0100
Subject: [PATCH] USB: serial: sierra: fix bogus alternate-setting assumption
Git-commit: 16620b483eaf7750413bae472f4363b6b959fcaa
Patch-mainline: v4.11
References: bsc#1037441

Interface numbers do not change when enabling alternate settings as
comment and code in this driver suggested.

Remove the confusing comment and redundant retrieval of the interface
number in probe, while simplifying and renaming the interface-number
helper.

Fixes: 4db2299da213 ("sierra: driver interface blacklisting")
Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Johan Hovold <johan@kernel.org>
Signed-off-by: Oliver Neukum <oneukum@suse.com>
---
 drivers/usb/serial/sierra.c | 29 +++++------------------------
 1 file changed, 5 insertions(+), 24 deletions(-)

diff --git a/drivers/usb/serial/sierra.c b/drivers/usb/serial/sierra.c
index 55ac4957333a..745a24d8ff3d 100644
--- a/drivers/usb/serial/sierra.c
+++ b/drivers/usb/serial/sierra.c
@@ -146,25 +146,9 @@ static int is_himemory(const u8 ifnum,
 	return 0;
 }
 
-static int sierra_calc_interface(struct usb_serial *serial)
+static int sierra_interface_num(struct usb_serial *serial)
 {
-	int interface;
-	struct usb_interface *p_interface;
-	struct usb_host_interface *p_host_interface;
-	dev_dbg(&serial->dev->dev, "%s\n", __func__);
-
-	/* Get the interface structure pointer from the serial struct */
-	p_interface = serial->interface;
-
-	/* Get a pointer to the host interface structure */
-	p_host_interface = p_interface->cur_altsetting;
-
-	/* read the interface descriptor for this active altsetting
-	 * to find out the interface number we are on
-	*/
-	interface = p_host_interface->desc.bInterfaceNumber;
-
-	return interface;
+	return serial->interface->cur_altsetting->desc.bInterfaceNumber;
 }
 
 static int sierra_probe(struct usb_serial *serial,
@@ -177,7 +161,7 @@ static int sierra_probe(struct usb_serial *serial,
 	udev = serial->dev;
 	dev_dbg(&udev->dev, "%s\n", __func__);
 
-	ifnum = sierra_calc_interface(serial);
+	ifnum = sierra_interface_num(serial);
 	/*
 	 * If this interface supports more than 1 alternate
 	 * select the 2nd one
@@ -189,9 +173,6 @@ static int sierra_probe(struct usb_serial *serial,
 		usb_set_interface(udev, ifnum, 1);
 	}
 
-	/* ifnum could have changed - by calling usb_set_interface */
-	ifnum = sierra_calc_interface(serial);
-
 	if (is_blacklisted(ifnum,
 				(struct sierra_iface_info *)id->driver_info)) {
 		dev_dbg(&serial->dev->dev,
@@ -354,7 +335,7 @@ static int sierra_send_setup(struct usb_serial_port *port)
 
 	/* If composite device then properly report interface */
 	if (serial->num_ports == 1) {
-		interface = sierra_calc_interface(serial);
+		interface = sierra_interface_num(serial);
 		/* Control message is sent only to interfaces with
 		 * interrupt_in endpoints
 		 */
@@ -969,7 +950,7 @@ static int sierra_startup(struct usb_serial *serial)
 		/* Determine actual memory requirements */
 		if (serial->num_ports == 1) {
 			/* Get interface number for composite device */
-			ifnum = sierra_calc_interface(serial);
+			ifnum = sierra_interface_num(serial);
 			himemoryp =
 			    (struct sierra_iface_info *)&typeB_interface_list;
 			if (is_himemory(ifnum, himemoryp)) {
-- 
2.12.0

