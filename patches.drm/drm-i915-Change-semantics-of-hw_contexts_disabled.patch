From: Egbert Eich <eich@suse.de>
Date: Wed Jan 27 19:20:13 2016 +0100
Subject: drm/i915: Change semantics of hw_contexts_disabled
Patch-mainline: never, not applicable to upstream
References: bsc#963276

Using a variable *_disable is suboptimal as a value of 'true'
is associated with something that's enabled.
Moreover, we want to start with the disable state, but the
kzalloc() makes sure the initial value is 'false'. So we
simply revert the semantics.

Signed-off-by: Egbert Eich <eich@suse.de>
Signed-off-by: Egbert Eich <eich@suse.com>
---
 drivers/gpu/drm/i915/i915_drv.h         |  2 +-
 drivers/gpu/drm/i915/i915_gem_context.c | 16 +++++++++-------
 2 files changed, 10 insertions(+), 8 deletions(-)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 318baef..640f772 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -979,7 +979,7 @@ typedef struct drm_i915_private {
 	struct drm_property *broadcast_rgb_property;
 	struct drm_property *force_audio_property;
 
-	bool hw_contexts_disabled;
+	bool hw_contexts_enabled;
 	uint32_t hw_context_size;
 
 	bool fdi_rx_polarity_reversed;
diff --git a/drivers/gpu/drm/i915/i915_gem_context.c b/drivers/gpu/drm/i915/i915_gem_context.c
index a7f6ce3..e19b551 100644
--- a/drivers/gpu/drm/i915/i915_gem_context.c
+++ b/drivers/gpu/drm/i915/i915_gem_context.c
@@ -245,12 +245,14 @@ void i915_gem_context_init(struct drm_device *dev)
 	uint32_t ctx_size;
 
 	if (!HAS_HW_CONTEXTS(dev)) {
-		dev_priv->hw_contexts_disabled = true;
+		dev_priv->hw_contexts_enabled = false;
 		return;
 	}
 
+	dev_priv->hw_contexts_enabled = true;
+
 	/* If called from reset, or thaw... we've been here already */
-	if (dev_priv->hw_contexts_disabled ||
+	if (!dev_priv->hw_contexts_enabled ||
 	    dev_priv->ring[RCS].default_context)
 		return;
 
@@ -259,12 +261,12 @@ void i915_gem_context_init(struct drm_device *dev)
 	dev_priv->hw_context_size = round_up(dev_priv->hw_context_size, 4096);
 
 	if (ctx_size <= 0 || ctx_size > (1<<20)) {
-		dev_priv->hw_contexts_disabled = true;
+		dev_priv->hw_contexts_enabled = false;
 		return;
 	}
 
 	if (create_default_context(dev_priv)) {
-		dev_priv->hw_contexts_disabled = true;
+		dev_priv->hw_contexts_enabled = false;
 		return;
 	}
 
@@ -276,7 +278,7 @@ void i915_gem_context_fini(struct drm_device *dev)
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct i915_hw_context *ctx;
 
-	if (dev_priv->hw_contexts_disabled)
+	if (!dev_priv->hw_contexts_enabled)
 		return;
 
 	ctx = dev_priv->ring[RCS].default_context;
@@ -455,7 +457,7 @@ int i915_switch_context(struct intel_ring_buffer *ring,
 	struct drm_i915_private *dev_priv = ring->dev->dev_private;
 	struct i915_hw_context *to;
 
-	if (dev_priv->hw_contexts_disabled)
+	if (!dev_priv->hw_contexts_enabled)
 		return 0;
 
 	if (ring != &dev_priv->ring[RCS])
@@ -487,7 +489,7 @@ int i915_gem_context_create_ioctl(struct drm_device *dev, void *data,
 	if (!(dev->driver->driver_features & DRIVER_GEM))
 		return -ENODEV;
 
-	if (dev_priv->hw_contexts_disabled)
+	if (!dev_priv->hw_contexts_enabled)
 		return -ENODEV;
 
 	ret = i915_mutex_lock_interruptible(dev);
