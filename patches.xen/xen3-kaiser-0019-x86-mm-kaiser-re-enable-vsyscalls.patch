From ecd5a23ba4031f4cd1c9225d30ae5d210d65fc1b Mon Sep 17 00:00:00 2001
From: Andrea Arcangeli <aarcange@redhat.com>
Date: Tue, 5 Dec 2017 21:15:07 +0100
Subject: [PATCH 19/19] xen/x86/mm/kaiser: re-enable vsyscalls
References: bsc#1068032 CVE-2017-5754
Patch-mainline: Never, SUSE-Xen specific

To avoid breaking the kernel ABI.

Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>

hughd adjusted it to the 3.2.96 tree (leaving out the PVCLOCK_FIXMAP
user mapping, which does not apply to this tree); and for safety
added vsyscall_pgprot, and a BUG_ON if _PAGE_USER outside of FIXMAP.

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
Automatically created from "patches.suse/kaiser-0019-x86-mm-kaiser-re-enable-vsyscalls.patch" by xen-port-patches.py

--- a/arch/x86/kernel/vsyscall_64-xen.c
+++ b/arch/x86/kernel/vsyscall_64-xen.c
@@ -49,6 +49,8 @@
 		__attribute__ ((unused, __section__(".vsyscall_" #nr))) notrace
 #define __syscall_clobber "r11","cx","memory"
 
+unsigned long vsyscall_pgprot = __PAGE_KERNEL_VSYSCALL;
+
 DEFINE_VVAR(int, vgetcpu_mode);
 DEFINE_VVAR(struct vsyscall_gtod_data, vsyscall_gtod_data) =
 {
@@ -288,7 +290,7 @@ void __init map_vsyscall(void)
 	unsigned long physaddr_vvar_page = __pa_symbol(&__vvar_page);
 
 	/* Note that VSYSCALL_MAPPED_PAGES must agree with the code below. */
-	__set_fixmap(VSYSCALL_FIRST_PAGE, physaddr_page0, PAGE_KERNEL_VSYSCALL);
+	__set_fixmap(VSYSCALL_FIRST_PAGE, physaddr_page0, __pgprot(vsyscall_pgprot));
 	__set_fixmap(VVAR_PAGE, physaddr_vvar_page, PAGE_KERNEL_VVAR);
 	BUILD_BUG_ON((unsigned long)__fix_to_virt(VVAR_PAGE) !=
 		     (unsigned long)VVAR_ADDRESS);
