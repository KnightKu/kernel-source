From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 3 Jan 2017 13:38:12 +0100
Subject: xen: DWARF EH-frame based stack unwinding
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Patch-mainline: Never, SUSE-Xen specific
References: bnc#1018348

This includes reverting f1883f86dea84fe47a71a39fc1afccc005915ed8.

Update Sep 18 2008 andi:
- suppress FRAME_POINTER select
Update Jan 17 2009 jeffm:
- Something in 2.6.29-rc1 tweaked the frame pointer code somehow, so I
  fixed that up.
Update Jul 02 2010 jbeulich:
- fix after upstream commit 9e565292270a2d55524be38835104c564ac8f795
Update Sep 15 2011 jbeulich:
- add support for DW_CFA_def_cfa_expression (needed by x86-64)
Update Nov 24 2011 jeffm:
- cfi_ignore takes more arguments
Update Aug 01 2012 jbeulich:
- mark unwind section start/end symbols as always relative
Update Apr 28 2014 jeffm:
- remove ix86 check for vdso32 compat range
Update Jun 24 2014 jeffm:
- VSYSCALL_START / END replaced upstream with
  VSYSCALL_ADDR / VSYSCALL_ADDR + PAGE_SIZE
Update Sep 22 2015 jslaby:
- Enablement after manual dwarf annotations are gone from upstream
Update Dec 07 2015 jslaby:
- Fix missing put_cpu in x86_32's dump_trace (bnc#943107)
  get_cpu is needed only for the loop, so move it
- Fix these warnings (since 4.4 as of 0ab32b6f1):
  kernel/unwind.c:672: warning: passing argument 2 of ‘probe_kernel_read’ makes pointer from integer without a cast
Update Jan 03 2017 jslaby:
- port to 4.9 -- the new unwind interface
Update Jan 31 2017 jslaby:
- fix build failures when disabled
Update Feb 01 2017 jslaby:
- fix for save_stack_trace (lockdep et al.)
- depends on !KASAN (too slow)
Update Feb 08 2017 jslaby:
- complete refactoring
Update Mar 29 2017 jslaby:
- final bunch of code cleanup, splitting of the patch has begun

TODO:
* assembler not unwound properly, as annotations are gone -- frame ptr is used
  for the rest of the stack instead (as always).

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Automatically created from "patches.suse/DWARF-EH-frame-based-stack-unwinding.patch" by xen-port-patches.py

--- a/arch/x86/entry/entry_32-xen.S
+++ b/arch/x86/entry/entry_32-xen.S
@@ -298,6 +298,27 @@ ENTRY(ret_from_fork)
 	jmp	2b
 END(ret_from_fork)
 
+#ifdef CONFIG_DWARF_UNWIND
+SYM_FUNC_START(arch_dwarf_init_running)
+	movl	4(%esp), %edx
+	movl	(%esp), %ecx
+	movl	%ecx, PT_EIP(%edx)
+	leal	4(%esp), %eax
+	movl	%eax, PT_OLDESP(%edx)
+	movl	%ebx, PT_EBX(%edx)
+	movl	%esi, PT_ESI(%edx)
+	movl	%edi, PT_EDI(%edx)
+	movl	%ebp, PT_EBP(%edx)
+	movl	$__KERNEL_CS, PT_CS(%edx)
+	movl	$__USER_DS, PT_DS(%edx)
+	movl	$__USER_DS, PT_ES(%edx)
+	movl	$__KERNEL_PERCPU, PT_FS(%edx)
+	movl	$__KERNEL_STACK_CANARY, PT_GS(%edx)
+	movl	$__KERNEL_DS, PT_OLDSS(%edx)
+	ret
+SYM_FUNC_END(arch_dwarf_init_running)
+#endif
+
 /*
  * Return to user mode is not as complex as all this looks,
  * but we want the default path for a system call return to
--- a/arch/x86/entry/entry_64-xen.S
+++ b/arch/x86/entry/entry_64-xen.S
@@ -638,6 +638,24 @@ ENTRY(do_softirq_own_stack)
 	ret
 END(do_softirq_own_stack)
 
+#ifdef CONFIG_DWARF_UNWIND
+SYM_FUNC_START(arch_dwarf_init_running)
+	movq	%r15, R15(%rdi)
+	movq	%r14, R14(%rdi)
+	movq	%r13, R13(%rdi)
+	movq	%r12, R12(%rdi)
+	movq	%rbp, RBP(%rdi)
+	movq	%rbx, RBX(%rdi)
+	movq	(%rsp), %r9
+	movq	%r9, RIP(%rdi)
+	leaq	8(%rsp), %r9
+	movq	%r9, RSP(%rdi)
+	movq	$__KERNEL_CS, CS(%rdi)
+	movq	$__KERNEL_DS, SS(%rdi)
+	ret
+SYM_FUNC_END(arch_dwarf_init_running)
+#endif
+
 idtentry debug			do_debug		has_error_code=0
 idtentry nmi			do_nmi_callback		has_error_code=0
 idtentry int3			do_int3			has_error_code=0
